<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Work%20Experience/Z%20Reference%20Link/"/>
      <url>/2025/01/04/Work%20Experience/Z%20Reference%20Link/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><p>加壳到底是怎么回事？ <a href="https://zhuanlan.zhihu.com/p/208660624">https://zhuanlan.zhihu.com/p/208660624</a></p><h1 id="Efficiency"><a href="#Efficiency" class="headerlink" title="Efficiency"></a>Efficiency</h1><h1 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h1><h1 id="Serialization"><a href="#Serialization" class="headerlink" title="Serialization"></a>Serialization</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Work%20Experience/Serialization/Protobuf/"/>
      <url>/2025/01/04/Work%20Experience/Serialization/Protobuf/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Work%20Experience/Security/%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/"/>
      <url>/2025/01/04/Work%20Experience/Security/%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Work%20Experience/Serialization/Json/"/>
      <url>/2025/01/04/Work%20Experience/Serialization/Json/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Work%20Experience/Efficiency/UE%20Project%20Git%20Pull&amp;Build/"/>
      <url>/2025/01/04/Work%20Experience/Efficiency/UE%20Project%20Git%20Pull&amp;Build/</url>
      
        <content type="html"><![CDATA[<p>使用UGit管理项目，设置定时任务每日自动唤醒计算机并执行该脚本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line"></span><br><span class="line">rem 获取脚本所在目录</span><br><span class="line">set &quot;script_dir=%~dp0&quot;</span><br><span class="line"></span><br><span class="line">rem 定义一个数组来存储所有仓库的相对路径</span><br><span class="line">set &quot;repos[0]=XXXXX\&quot;</span><br><span class="line">set &quot;repos[1]=XXXXX\Plugins\&quot;</span><br><span class="line">set &quot;repos[2]=YYYYY\&quot;</span><br><span class="line">set &quot;repos[3]=XXXXX_common\&quot;</span><br><span class="line">set &quot;repos[4]=XXXXX\Content\Feature\ZZZZZ\&quot;</span><br><span class="line"></span><br><span class="line">rem 初始化仓库计数器</span><br><span class="line">set &quot;repo_count=0&quot;</span><br><span class="line"></span><br><span class="line">rem 计算数组的长度</span><br><span class="line">:SymLoop </span><br><span class="line">if defined repos[%repo_count%] ( </span><br><span class="line">    set /a &quot;repo_count+=1&quot;</span><br><span class="line">   GOTO :SymLoop </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">echo Processing %repo_count% repositories.</span><br><span class="line"></span><br><span class="line">set /a &quot;repo_count-=1&quot;</span><br><span class="line"></span><br><span class="line">taskkill /F /IM UE4Editor.exe /T</span><br><span class="line"></span><br><span class="line">taskkill /F /IM rider64.exe /T</span><br><span class="line"></span><br><span class="line">rem 遍历所有仓库</span><br><span class="line">for /l %%i in (0, 1, %repo_count%) do (</span><br><span class="line"></span><br><span class="line">    rem 构建仓库的完整路径</span><br><span class="line">    set &quot;repo_path=!script_dir!!repos[%%i]!&quot;</span><br><span class="line"></span><br><span class="line">    echo Processing repository: !repo_path!</span><br><span class="line"></span><br><span class="line">    rem 进入仓库目录</span><br><span class="line">    cd /d &quot;!repo_path!&quot;</span><br><span class="line"></span><br><span class="line">    rem 删除所有锁文件</span><br><span class="line">    del &quot;.git\index.lock&quot;</span><br><span class="line"></span><br><span class="line">    rem 获取当前 Git 分支名</span><br><span class="line">    for /f %%i in (&#x27;git rev-parse --abbrev-ref HEAD&#x27;) do (</span><br><span class="line">        set branch_name=%%i</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    echo &quot;Current branch: !branch_name!&quot;</span><br><span class="line"></span><br><span class="line">    rem 拉取最新代码</span><br><span class="line">    call git fetch --progress --recurse-submodules=on-demand origin %branch_name%</span><br><span class="line">    call git pull origin %branch_name%</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">echo All repositories processed.</span><br><span class="line"></span><br><span class="line">rem 返回上级目录</span><br><span class="line">cd /d &quot;!script_dir!&quot;</span><br><span class="line"></span><br><span class="line">echo Start Building...</span><br><span class="line">call !script_dir!YYYYY\Engine\Build\BatchFiles\Build.bat -Target=&quot;XXXXXEditor Win64 Development -Project=\&quot;!script_dir!XXXXX\XXXXX.uproject\&quot;&quot; -Target=&quot;ShaderCompileWorker Win64 Development -Quiet&quot; -WaitMutex -FromMsBuild</span><br><span class="line">echo End   Building...</span><br><span class="line"></span><br><span class="line">start rider64.exe &quot;!script_dir!XXXXX\XXXXX.sln&quot;</span><br><span class="line"></span><br><span class="line">start code &quot;!script_dir!XXXXX\XXXXX.code-workspace&quot;</span><br><span class="line"></span><br><span class="line">start !script_dir!YYYYY\Engine\Binaries\Win64\UE4Editor.exe !script_dir!XXXXX\XXXXX.uproject</span><br><span class="line"></span><br><span class="line">endlocal</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/Z%20Reference%20Link/"/>
      <url>/2025/01/04/Unreal%20Engine/Z%20Reference%20Link/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><p>UE5 GameplayAbilitySystem <a href="https://rootjhon.github.io/posts/UE5-GameplayAbilitySystem/">https://rootjhon.github.io/posts/UE5-GameplayAbilitySystem/</a></p><p>虚幻学习资料整理 <a href="https://zhuanlan.zhihu.com/p/452813815">https://zhuanlan.zhihu.com/p/452813815</a></p><h1 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h1><h1 id="Core"><a href="#Core" class="headerlink" title="Core"></a>Core</h1><h1 id="Editor-Extension"><a href="#Editor-Extension" class="headerlink" title="Editor Extension"></a>Editor Extension</h1><h1 id="Platform"><a href="#Platform" class="headerlink" title="Platform"></a>Platform</h1><h1 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h1><p>高级运动系统 <a href="https://github.com/ShadowfallStudios/ALS-Community">https://github.com/ShadowfallStudios/ALS-Community</a></p><h1 id="Sounds"><a href="#Sounds" class="headerlink" title="Sounds"></a>Sounds</h1><h1 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h1><h1 id="UnLua"><a href="#UnLua" class="headerlink" title="UnLua"></a>UnLua</h1><h1 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h1><h2 id="NavMesh"><a href="#NavMesh" class="headerlink" title="NavMesh"></a>NavMesh</h2><h2 id="BehaviorTree"><a href="#BehaviorTree" class="headerlink" title="BehaviorTree"></a>BehaviorTree</h2><h2 id="EnvironmentQuery"><a href="#EnvironmentQuery" class="headerlink" title="EnvironmentQuery"></a>EnvironmentQuery</h2><h1 id="GamePlay"><a href="#GamePlay" class="headerlink" title="GamePlay"></a>GamePlay</h1><h2 id="Game-Ability-System"><a href="#Game-Ability-System" class="headerlink" title="Game Ability System"></a>Game Ability System</h2><h2 id="Framwork"><a href="#Framwork" class="headerlink" title="Framwork"></a>Framwork</h2><h2 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h2><p>UE4的物理同步  <a href="https://zhuanlan.zhihu.com/p/618955126">https://zhuanlan.zhihu.com/p/618955126</a><br>载具的物理同步  <a href="https://zhuanlan.zhihu.com/p/623356428">https://zhuanlan.zhihu.com/p/623356428</a></p><h1 id="Asset-amp-Pak-amp-Patch"><a href="#Asset-amp-Pak-amp-Patch" class="headerlink" title="Asset&amp;Pak&amp;Patch"></a>Asset&amp;Pak&amp;Patch</h1><h1 id="Rendering"><a href="#Rendering" class="headerlink" title="Rendering"></a>Rendering</h1><h1 id="Physics"><a href="#Physics" class="headerlink" title="Physics"></a>Physics</h1><h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/UnLua/Unlua%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2025/01/04/Unreal%20Engine/UnLua/Unlua%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/UnLua/Unlua%E6%8C%87%E5%8D%97/"/>
      <url>/2025/01/04/Unreal%20Engine/UnLua/Unlua%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/UI/Empty/"/>
      <url>/2025/01/04/Unreal%20Engine/UI/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/Sounds/Empty/"/>
      <url>/2025/01/04/Unreal%20Engine/Sounds/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/Rendering/Empty/"/>
      <url>/2025/01/04/Unreal%20Engine/Rendering/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/Profile/UE%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B7%A5%E5%85%B7/"/>
      <url>/2025/01/04/Unreal%20Engine/Profile/UE%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h1><h2 id="Unreal-Insight"><a href="#Unreal-Insight" class="headerlink" title="Unreal Insight"></a>Unreal Insight</h2><p><a href="https://docs.unrealengine.com/en-US/Engine/Performance/UnrealInsights/Overview/index.html">Unreal Insights</a> 在 Unreal Engine 4.24.3版本中开始支持移动平台性能数据录取。数据直接写入文件，GUI工具采集结束后离线解析数据文件。</p><p>优势：可长时间录制数据，数据在时间轴上以进程调度的形式展示，比较容易分析Game、RenderThread与WorkerThread的调度情况，从整体上结合时间连贯性对CPU瓶颈进行初步的定位。也可用于分析有规律的卡顿掉帧的情况。</p><p>劣势：所记录的调用堆栈较浅（可手动打点），较难定位到具体出问题的代码，人工分析需要时间与经验。</p><h2 id="Unreal-Profiler"><a href="#Unreal-Profiler" class="headerlink" title="Unreal Profiler"></a>Unreal Profiler</h2><blockquote><p>UE5已删除此模块，建议使用 Unreal Insights</p></blockquote><p>Unreal Engine 中的 <a href="https://docs.unrealengine.com/4.27/en-US/TestingAndOptimization/PerformanceAndProfiling/Profiler/">Profiler</a>则是分析CPU端性能情况的一个老工具，与Unreal Insights相比它缺少了线程间调度情况的数据，优点在于其记录的调用堆栈深度较深，可与Insights结合使用 UE4引擎窗口中菜单DeveloperTools下SessionFrontend界面即为Profiler所在的窗口 可通过两种方法抓取数据：</p><ol><li>启动程序时增加参数：-messaging</li><li>游戏中使用命令： stat startfile, stat stopfile</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sdcard/UE4Game/YourProject/UE4CommandLine.txt ../../../YourProject/YourProject.uproject -messaging # 数据存放于 /sdcard/UE4Game/FPSDemo/FPSDemo/Saved/Profiling/UnrealStats</span><br></pre></td></tr></table></figure><p>通过Profiler数据就能看到更深的调用堆栈，比如这里就能看到GameEngine::Tick中不同代码的占用比例，左侧还有按类型分类的分组数据等，更多功能可参考Unreal<a href="https://docs.unrealengine.com/4.27/en-US/TestingAndOptimization/PerformanceAndProfiling/Profiler/">官方文档</a></p><h2 id="Simpleperf"><a href="#Simpleperf" class="headerlink" title="Simpleperf"></a>Simpleperf</h2><p>Simpleperf可录制很深的CPU调用堆栈，可用于详细分析问题时间内的CPU代码执行情况，其将数据聚合，输出类似于Instrument TimeProfiler的形式，可以看到不同函数在一段时间内的贡献、占比情况，及调用次数，方便对其进行更有针对性的优化。但这种聚合模式没有单帧的概念，主要用于宏观统计。因此可以与Profiler、Insights等工具结合使用。</p><blockquote><p>建议使用Test包进行数据分析<br>避免Development版本额外代码所造成的性能压力影响真实数据</p></blockquote><p>原理简介：</p><p>与Instrument TimeProfiler相同，使用<a href="https://jvns.ca/blog/2016/03/12/how-does-perf-work-and-some-questions/">采样</a>的概念进行CPU数据分析 现代CPU拥有<a href="https://developer.arm.com/documentation/ddi0433/c/performance-monitoring-unit/about-the-performance-monitoring-unit?lang=en">PMU（Performance Monitor Unit）</a>单元，通过Counter寄存器可得到精确的Cycle Count等CPU Performance数据</p><p><a href="https://android.googlesource.com/platform/system/extras/+/master/simpleperf/doc/README.md">simpleperf</a>基于linux的<a href="https://man7.org/linux/man-pages/man2/perf_event_open.2.html">perf</a>改造而来，要记录与代码相关的性能数据，就需要记录目标线程的<a href="https://github.com/torvalds/linux/blob/v4.3/arch/x86/kernel/perf_regs.c#L114-L118">寄存器</a> 因此存储寄存器数据就是采样的主要工作之一，存储的频率就是采样的频率，采样的频率不能太高，是为了性能与存储的角度考虑的 理论上数据量越大，基于采样的数据经过统计学处理后就越接近真实数据</p><p>可通过NDK中的工具进行真机数据录制，UE427建议使用 NDK r21d 版本</p><p>通过下方Python脚本即可自动采集并生成火焰图与Android Studio可打开的Perf数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python simpleperf.py ndkpath symbolpath/symbolfile -duration=10[optional] -app=com.tencent.dummy[optional]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> fnmatch</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parseargs</span>(<span class="params">args</span>):</span><br><span class="line">    ndkpath_ = args[<span class="number">1</span>]</span><br><span class="line">    symbolpath_ = args[<span class="number">2</span>]</span><br><span class="line">    app_ = <span class="string">&#x27;com.tencent.dummy&#x27;</span></span><br><span class="line">    duration_ = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(args) &gt; <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> arg <span class="keyword">in</span> args[<span class="number">3</span>:]:</span><br><span class="line">            words_ = arg.split(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">len</span>(words_) &lt; <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (words_[<span class="number">0</span>] == <span class="string">&#x27;-duration&#x27;</span>):</span><br><span class="line">                duration_ = <span class="built_in">int</span>(words_[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">elif</span> (words_[<span class="number">0</span>] == <span class="string">&#x27;-app&#x27;</span>):</span><br><span class="line">                app_ = words_[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ndkpath_, symbolpath_, app_, duration_</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_files</span>(<span class="params">directory, pattern</span>):</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> basename <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> fnmatch.fnmatch(basename, pattern):</span><br><span class="line">                filename = os.path.join(root, basename)</span><br><span class="line">                <span class="keyword">yield</span> filename</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readforpackagename</span>(<span class="params">filepath, packagename</span>):</span><br><span class="line">    perftxt_ = <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (perftxt_ <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;failed to read file &#123;0&#125;!&#x27;</span>.<span class="built_in">format</span>(filepath))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    lines_ = perftxt_.readlines()</span><br><span class="line">    perftxt_.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Android 10</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines_[<span class="number">1</span>:]:</span><br><span class="line">        <span class="keyword">match</span> = re.search(<span class="string">&#x27;/data/app/&#x27;</span> + packagename + <span class="string">&#x27;\\S+&#x27;</span>, line)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">match</span>.group(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Android 11</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines_[<span class="number">1</span>:]:</span><br><span class="line">        <span class="keyword">match</span> = re.search(<span class="string">&#x27;/data/app/\\S+&#x27;</span> + packagename + <span class="string">&#x27;\\S+&#x27;</span>, line)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">match</span>.group(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">args</span>):</span><br><span class="line">    ndkpath_, symbolpath_, app_, duration_ = parseargs(args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (os.path.isfile(symbolpath_) <span class="keyword">is</span> <span class="literal">False</span>):</span><br><span class="line">        <span class="keyword">for</span> possiblesymbol <span class="keyword">in</span> find_files(symbolpath_, <span class="string">&#x27;*.so&#x27;</span>):</span><br><span class="line">            symbolpath_ = possiblesymbol</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ndk: &#123;0&#125;\nsymobl: &#123;1&#125;\napp: &#123;2&#125;\nduration: &#123;3&#125;\n&#x27;</span>.<span class="built_in">format</span>(ndkpath_, symbolpath_, app_, duration_))</span><br><span class="line"></span><br><span class="line">    perfpath_ = ndkpath_ + <span class="string">&#x27;/simpleperf/bin/android/arm64/simpleperf&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (os.path.isfile(perfpath_) <span class="keyword">is</span> <span class="literal">False</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;file &#123;0&#125; not found!&#x27;</span>.<span class="built_in">format</span>(perfpath_))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># push simplerperf executable to mobile</span></span><br><span class="line">    subprocess.call(<span class="string">&#x27;adb push &#x27;</span> + perfpath_ + <span class="string">&#x27; /data/local/tmp&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># setup simpleperf permission</span></span><br><span class="line">    subprocess.call(<span class="string">&#x27;adb shell chmod a+x /data/local/tmp/simpleperf&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># fix &#x27;too many open files&#x27; error</span></span><br><span class="line">    subprocess.call(<span class="string">&#x27;adb shell ulimit -n 2048&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -f 6000, higher sampling frequency for more accurate profiling</span></span><br><span class="line">    subprocess.call(</span><br><span class="line">        <span class="string">&#x27;adb shell \&quot;cd /data/local/tmp/ &amp;&amp; simpleperf record -g --app &#123;0&#125; --duration &#123;1&#125; -f 6000 &amp; exit\&quot;&#x27;</span>.<span class="built_in">format</span>(app_, duration_), shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pull perf.data</span></span><br><span class="line">    subprocess.call(<span class="string">&#x27;adb pull /data/local/tmp/perf.data perf.data&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    perfexe_ = ndkpath_ + <span class="string">&#x27;/simpleperf/bin/windows/x86_64/simpleperf.exe&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (os.path.isfile(perfexe_) <span class="keyword">is</span> <span class="literal">False</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;file &#123;0&#125; not found!&#x27;</span>.<span class="built_in">format</span>(perfexe_))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># setup binary_cache folder</span></span><br><span class="line">    subprocess.call(perfexe_ + <span class="string">&#x27; report -i perf.data -o perf.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    packagename_ = readforpackagename(<span class="string">&#x27;perf.txt&#x27;</span>, app_)</span><br><span class="line">    <span class="keyword">if</span> packagename_ == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;package &#123;0&#125; not found!&#x27;</span>.<span class="built_in">format</span>(app_))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;package name: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(packagename_))</span><br><span class="line"></span><br><span class="line">    bianrycachepath_ = ndkpath_ + <span class="string">&#x27;/simpleperf/binary_cache/&#x27;</span> + packagename_.replace(<span class="string">&#x27;libUE4.so&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;package name: &#123;0&#125;\nbinary cache: &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(packagename_, bianrycachepath_))</span><br><span class="line"></span><br><span class="line">    shutil.rmtree(ndkpath_ + <span class="string">&#x27;/simpleperf/binary_cache/&#x27;</span>, ignore_errors=<span class="literal">True</span>)</span><br><span class="line">    os.makedirs(bianrycachepath_)</span><br><span class="line"></span><br><span class="line">    shutil.copy2(symbolpath_, bianrycachepath_)</span><br><span class="line"></span><br><span class="line">    curfolder_ = os.path.abspath(os.getcwd())</span><br><span class="line"></span><br><span class="line">    subprocess.call(perfexe_ + <span class="string">&#x27; report -i perf.data -o perf.caller.txt -g caller -n --full-callgraph --symfs &#x27;</span> + ndkpath_ + <span class="string">&#x27;/simpleperf/binary_cache/&#x27;</span>)</span><br><span class="line">    subprocess.call(perfexe_ + <span class="string">&#x27; report -i perf.data -o perf.callee.txt -g callee -n --full-callgraph --symfs &#x27;</span> + ndkpath_ + <span class="string">&#x27;/simpleperf/binary_cache/&#x27;</span>)</span><br><span class="line">    subprocess.call(<span class="string">&#x27;python report_html.py -i &#123;0&#125;/perf.data -o &#123;0&#125;/perf.html --no_browser&#x27;</span>.<span class="built_in">format</span>(curfolder_, curfolder_), cwd=ndkpath_+<span class="string">&#x27;/simpleperf/&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># convert perf.data to Android Studio openable perf.trace</span></span><br><span class="line">    subprocess.call(perfexe_ + <span class="string">&#x27; report-sample --protobuf --show-callchain -i perf.data -o perf.trace&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt;= <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Usage: python simpleperf.py `ndk path` `libUE4.so symbol path` -app=com.tencent.dummy[optional] -duration=10[optional, in seconds]&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    start(sys.argv)</span><br></pre></td></tr></table></figure><h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><p>使用Android Studio的 <a href="https://developer.android.com/studio/profile/apk-profiler">ProfileAPK</a> 功能，即可较为自动的生成性能数据</p><h3 id="Perfetto"><a href="#Perfetto" class="headerlink" title="Perfetto"></a>Perfetto</h3><p><a href="https://perfetto.dev/">https://perfetto.dev/</a></p><p>可以拿到simpleperf、systrace等数据</p><p>可用于分析APP、系统整体CPU调度，渲染节奏等问题</p><h2 id="CacheSim"><a href="#CacheSim" class="headerlink" title="CacheSim"></a>CacheSim</h2><p>虚幻引擎设计成熟，核心代码流程上，算法、结构层面的优化已难以挖掘水分</p><p>对于一些自行实现或引擎自身模块，在算法层面无优化手段后，可针对性的进行Cache优化</p><p>使用软件模拟AMD CPU指令集，统计出出现Cache Miss的<strong>代码行</strong>，助力深度CPU性能分析</p><p>缺点：仅可在Windows、Linux平台进行软件模拟</p><p>[挤掉Cache Miss的水分：Cascade粒子系统的优化（一）]</p><p>[GDC2017 | Cold, Hard Cache: Insomniac’s Cache Simulator]</p><h2 id="Arm-Streamline"><a href="#Arm-Streamline" class="headerlink" title="Arm Streamline"></a>Arm Streamline</h2><p><a href="https://developer.arm.com/Tools%20and%20Software/Arm%20Mobile%20Studio">Arm Mobile Studio 2022</a>版本除了常见CPU Counter的采集之外，与CacheSim一样支持了针对代码行的Cache分析</p><p>优势：真机跑数据，硬件Counter更准确，参考价值更高</p><p><a href="https://developer.arm.com/Tools%20and%20Software/Streamline%20Performance%20Analyzer">Arm Streamline Performance Analyzer</a> 支持采集Arm芯片的GPU、CPU Counter数据，支持CI 并支持结合Event采样，将Counter数据与源码建立联系 <a href="https://developer.arm.com/Additional%20Resources/Video%20Tutorials/Arm%20Mali%20GPU%20Training%20-%20EP3-3">官方教学视频</a></p><p>通过此工具可分析移动平台真机CPU指令执行过程中的Cache、Branch等情况，以更深入且精准的优化游戏CPU端性能表现</p><p><strong>建议使用Test包进行数据采集</strong></p><p>【1】选择需要采集的Counter：</p><p>右上角有模板，针对你的需要，选择CPU Cache（Cache Miss）、Branching（分支预测失败）、Clock（执行时间）等模板：</p><p>红色圈圈代表对此Counter进行Event-based sampling，即将Counter与执行代码结合 当Counter触发 Threshold（默认是1000）次后，进行一次执行堆栈的采样 Cache Miss相关Counter的介绍：</p><p>【2】设置采集参数</p><p>将带符号表的libUE4.so添加到Program Images中</p><p>Frequency：Normal（采样率越高，对频繁调用的小函数侦听越准确，但数据量与性能会大大下降，可根据采集结果权衡设置）</p><p>Buffer Mode：Streaming</p><p>打开堆栈回溯（打开no-omit-frame-pointer编译选项）</p><p>最终根据Counter数据，生成的报告所采取的采样比率，同样是越高越精准</p><p><strong>数据解析</strong></p><blockquote><p>可先拉起游戏运行至需要测试的玩法、地点，尽可能短时的采集数据</p></blockquote><p>开始采集后，点击左侧Stop按钮🛑停止采集，将自动生成报告</p><p>【1】Call Paths</p><p>以调用堆栈的形式展示所选Counter Sample Event的命中情况：精确到函数</p><p>双击可跳转至 Code 页签</p><p>【2】Functions</p><p>以函数列表形式展示Counter Sample Event命中情况</p><p>双击可跳转至 Code 页签</p><p>【3】Code</p><p>工具支持Counter（Cache Miss）数据归因（Attribution），即指明发生Cache Miss的位置 但因为现代CPU乱序执行等优化手段，加上基于堆栈采样的数据聚合原理，数据仅供参考 但已足够分析出问题函数中问题代码的位置：</p><p>如上图中大概是PrimitiveProxy的获取不连续，导致的CacheMiss，需要结合上下文进行分析，确认真正问题所在</p><blockquote><p>看上去行号不能精确对上？<br>解释见此<a href="https://community.arm.com/support-forums/f/graphics-gaming-and-vr-forum/54427/streamline-analyze-performance">文章</a></p></blockquote><h2 id="XCode-Timeprofiler"><a href="#XCode-Timeprofiler" class="headerlink" title="XCode Timeprofiler"></a>XCode Timeprofiler</h2><p><a href="https://developer.apple.com/videos/play/wwdc2019/411/">https://developer.apple.com/videos/play/wwdc2019/411/</a></p><p>与Simpleperf原理相同的CPU性能分析工具，功能强大</p><h2 id="Best-Practice"><a href="#Best-Practice" class="headerlink" title="Best Practice"></a>Best Practice</h2><p>粗粒度工具：FramePro、UnrealInsight 用于开发期CI暴漏明显问题</p><p>发现问题后，使用细粒度工具进行深度分析：Simpleperf、Streamline、TimeProfiler</p><p>建议使用Test包，排除Cache、冗余代码、Profiler本身对性能的影响</p><p>尝试：离线计算、ParallelFor、异步化、SOA化等方案</p><p>并使用CacheSim、Streamline进行 Cache Miss 分析，压榨出最后的水分</p><p>实例一：GC垃圾回收</p><p><strong>偶发大负载任务，充分利用可能空闲的线程</strong></p><p><strong>ParallelFor 进行 LockFree 优化</strong></p><p>UE垃圾回收扫描引用时，将引用分析抛到多个Task线程处理</p><p>但GC时通常会阻塞Game、RHI、Render等线程，可充分利用可能空闲的这些大核线程，进一步提升性能：</p><h3 id="实例二：全局变量与Cache-Miss"><a href="#实例二：全局变量与Cache-Miss" class="headerlink" title="实例二：全局变量与Cache Miss"></a>实例二：全局变量与Cache Miss</h3><p>将其挪出ParallelFor中的Lambda：</p><h1 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h1><p>现代Mobile GPU通常使用 <a href="https://blog.imaginationtech.com/understanding-powervr-series5xt-powervr-tbdr-and-architecture-efficiency-part-4/">TBR、TBDR</a> 硬件架构</p><p>在有限的功耗下提供尽可能多的性能空间</p><p>除了控制 运算负载、动态分支、全精度运算 等天然GPU不友好的指标之外</p><p>Mobile GPU因其On-chip Memory较小的原因</p><p>需要严格控制寄存器数量，避免Register Spill产生额外IO带宽</p><h2 id="Adreno-GPU"><a href="#Adreno-GPU" class="headerlink" title="Adreno GPU"></a>Adreno GPU</h2><p><a href="https://developer.qualcomm.com/sites/default/files/docs/adreno-gpu/developer-guide/gpu/gpu.html">https://developer.qualcomm.com/sites/default/files/docs/adreno-gpu/developer-guide/gpu/gpu.html</a></p><p>介绍Adreno GPU counter指标与建议值</p><p>使用Snapdragon Profiler进行Counter数据抓取</p><p>提供python脚本进行Counter数据汇总与分类</p><p>其次选择Realtime项，打开app后</p><p>在下方双击System分组的所有GPU相关指标，即可自动开始记录Counter数据：</p><blockquote><p>高通不建议使用Process分组的指标，经测试发现会导致865频率降低的bug，直接采集全屏游戏时System组的性能数据</p></blockquote><p>采集完毕后点击暂停按钮：</p><p>后点击csv按钮输出Counter数据，即可通过python脚本进行简单的数据分析</p><p><strong>Counter介绍</strong></p><ul><li><p><code>% Anisotropic Filtered</code><br>  Percent of texels filtered using the ‘Anisotropic’ sampling method.<br>  各向异性过滤比例，尽量多使用双线性过滤，当然一些比如地形之类的贴图还是需要使用各向异性过滤，保证在30%以下</p></li><li><p><code>% Linear Filtered</code><br>  Percent of texels filtered using the ‘Linear’ sampling method.<br>  双线性过滤比例，尽量使用它</p></li><li><p><code>% Nearest Filtered</code><br>  Percent of texels filtered using the ‘Nearest’ sampling method.<br>  Nearest过滤比例</p></li><li><p><code>% Non-Base Level Textures</code><br>  Percent of texels coming from a non-base MIP level.<br>  采样到非第零级mipmap的比例，越高越好，使用次级mip可以减少内存带宽的使用</p></li><li><p><code>% Prims Clipped</code><br>  Percentage of primitives clipped by the GPU (where new<br>  primitives are generated).<br>  For a primitive to be clipped, it has to have a visible portion inside<br>  the viewport but extend outside the ‘guardband’ an area that surrounds<br>  the viewport and significantly reduces the number of primitives the<br>  hardware has to clip.<br>  GPU剔除掉的面数比例，即模型有一部分摄像机看不到，硬件帮你剔除的情况</p></li><li><p><code>% Prims Trivially Rejected</code><br>  Percentage of primitives that are trivially rejected.<br>  A primitive can be trivially rejected if it is outside the visible<br>  region of the render surface. These primitives are ignored by the<br>  rasterizer.<br>  完全没有贡献的面。即完全不在相机里的面，尽量将此类模型在CPU上就剔除掉</p></li><li><p><code>% Shader ALU Capacity Utilized</code><br>  Percent of maximum shader capacity (ALU operations) utilized.<br>  For each cycle that the shaders are working, the average percentage of<br>  the total shader ALU capacity that is utilized for that cycle.<br>  ALU的利用率，一般情况下越高越好，因为你充分利用了GPU的数学运算能力</p></li><li><p><code>% Shaders Busy</code><br>  Percentage of time that all Shader cores are busy.<br>  Shader Core有工作的比例，包括ALU、TPU、LoadStore的情况。当然，也包括Memory Fetch Stall时等待的比例<br>  现代的GPU会在发生Stall时，尝试去切换线程，让GPU一致忙起来，以此来“掩盖”这种内存导致的Stall</p></li><li><p><code>% Stalled on System Memory</code><br>  Percentage of cycles the L2 cache is stalled waiting for data from system memory.<br>  L2 cache未命中，等待DRAM数据时产生的延迟的比例<br>  如果此指标过高，可能是你采样的数据的空间连续性比较差，减少Dependent Texture Fetch等</p></li><li><p><code>% Texture Fetch Stall</code><br>  Percentage of clock cycles where the shader processors cannot<br>  make any more requests for texture data.<br>  A high value for this metric implies the shaders cannot get texture data<br>  from the texture pipe (L1, L2 cache or memory) fast enough, and<br>  rendering performance may be negatively affected.<br>  Shader Core因为正在等待贴图相关内存IO而产生空转的比例<br>  可能是没开Mipmap或使用的贴图分辨率过大，或采样贴图的UV空间连续性太差了</p></li><li><p><code>% Texture L1 Miss</code><br>  Number of L1 texture cache misses divided by L1 texture cache<br>  requests.<br>  This metric does not consider how many texture requests are made per<br>  time period (like the ‘% GPU L1 Texture cache miss’ metric), but is<br>  simple miss to request ratio.<br>  贴图L1 cache未命中的比例</p></li><li><p><code>% Texture L2 Miss</code><br>  Number of L2 texture cache misses divided by L2 texture cache requests.<br>  This metric does not consider how many texture requests are made per time period, but is simple miss to request ratio.<br>  贴图L2 cache未命中的比例</p></li><li><p><code>% Time ALUs Working</code><br>  Percentage of time the ALUs are working while the Shaders are busy.<br>  Shader Core busy时，ALU在工作的比例，理想的这个比例应该尽可能地高</p></li><li><p><code>% Time Compute</code><br>  Amount of time spent in compute work compared to the total time spent shading everything.<br>  Shader Core busy时，Compute计算单元工作的比例</p></li><li><p><code>% Time EFUs Working</code><br>  Percentage of time the EFUs are working while the Shaders are busy.<br>  Elementary functional unit (复杂函数sin、log等运算单元)，理想的此比例应该尽可能地低</p></li><li><p><code>% Time Shading Fragments</code><br>  Amount of time spent shading fragments compared to the total time spent shading everything.<br>  渲染Fragment运算时的比例</p></li><li><p><code>% Time Shading Vertices</code><br>  Amount of time spent shading vertices compared to the total time spent shading everything.<br>  处理Vertices运算时的比例</p></li><li><p><code>% Vertex Fetch Stall</code><br>  Percentage of clock cycles where the GPU cannot make any more<br>  requests for vertex data.<br>  A high value for this metric implies the GPU cannot get vertex data from<br>  memory fast enough, and rendering performance may be negatively<br>  affected.<br>  当GPU因为内存IO问题无法获取vertex数据时的比例。可能是场景顶点数过多的缘故，理想的输入GPU的顶点数应保持在300K-500K的数量级</p></li><li><p><code>ALU / Fragment</code><br>  Average number of scalar fragment shader ALU instructions<br>  issued per shaded fragment, expressed as full precision ALUs (2 mediump =<br>  1 fullp).<br>  Includes interpolation instruction. Does not include vertex shader<br>  instructions.<br>  平均处理每个Fragment的运算中，ALU相关的指令数（记录全精度ALU，也包括interpolation的指令）</p></li><li><p><code>ALU / Vertex</code><br>  Average number of vertex scalar shader ALU instructions issued per shaded vertex.<br>  Does not include fragment shader instructions.<br>  平均处理每个Vertex的运算中，ALU相关的指令数</p></li><li><p><code>Average Polygon Area</code><br>  Average number of pixels per polygon.<br>  Adreno’s binning architecture will count a primitive for each ‘bin’ it<br>  covers, so this metric may not exactly match expectations.<br>  每个面平均有多少像素，这个值可能不太准，理想的10-15像素/面</p></li><li><p><code>Average Vertices / Polygon</code><br>  Average number of vertices per polygon.<br>  This will be around 3 for triangles, and close to 1 for triangle strips.<br>  平均每个面有多少顶点</p></li><li><p><code>Avg Bytes / Fragment</code><br>  Average number of bytes transferred from main memory for each fragment.<br>  每个Fragment运算过程中传输到DRAM的内存的字节数</p></li><li><p><code>Avg Bytes / Vertex</code><br>  Average number of bytes transferred from main memory for each vertex.<br>  每个Vertext运算过程中传输到DRAM的内存的字节数</p></li><li><p><code>Avg Preemption Delay</code><br>  Average time (us) from the preemption request to preemption start.<br>  GPU线程抢占（类似CPU线程调度，将数据写入DRAM）所产生的延迟的比例</p></li><li><p><code>Clocks / Second</code><br>  Number of GPU clocks per second.<br>  GPU的频率，满频时采集数据比较有参考性</p></li><li><p><code>EFU / Fragment</code><br>  Average number of scalar fragment shader EFU instructions issued per shaded fragment.<br>  Does not include Vertex EFU instructions<br>  每个Fragment中EFU复杂运算的平均数量，越低越好</p></li><li><p><code>EFU / Vertex</code><br>  Average number of scalar vertex shader EFU instructions issued per shaded vertex.<br>  Does not include fragment EFU instructions<br>  每个Vertex中EFU复杂运算的平均数量，越低越好</p></li><li><p><code>Fragment ALU Instructions / Sec (Full)</code><br>  Total number of full precision fragment shader instructions issued, per second.<br>  Does not include medium precision instructions or texture fetch instructions.<br>  Fragment中每秒里全精度ALU指令的平均数量，<strong>移动GPU要尽全力使用半精度运算</strong>，Fragment中除了位置运算，基本用半精度就足够<br>  既能加快运算，也能降低带宽也能减少发生register spill的比例</p></li><li><p><code>Fragment ALU Instructions / Sec (Half)</code><br>  Total number of half precision Scalar fragment shader instructions issued, per second.<br>  Does not include full precision instructions or texture fetch instructions.<br>  Fragment中每秒里半精度ALU指令的平均数量，<strong>移动GPU要尽全力使用半精度运算</strong></p></li><li><p><code>Fragment EFU Instructions / Second</code><br>  Total number of Scalar fragment shader Elementary Function Unit (EFU) instructions issued, per second.<br>  These include math functions like sin, cos, pow, etc.<br>  Fragment中每秒里EFU指令数，当然是越少越好</p></li><li><p><code>Fragment Instructions / Second</code><br>  Total number of fragment shader instructions issued, per<br>  second.<br>  Reported as full precision scalar ALU instructions 2 medium precision<br>  instructions equal 1 full precision instruction. Also includes<br>  interpolation instructions (which are executed on the ALU hardware) and<br>  EFU (Elementary Function Unit) instructions. Does not include texture<br>  fetch instructions.<br>  Fragment中每秒的所有指令数（ALU计算的是全精度，也包含interpolation与EFU，不包含贴图fetch指令）</p></li><li><p><code>Fragments Shaded / Second</code><br>  Number of fragments submitted to the shader engine, per second.<br>  每秒提交到Shader Core中的Fragmenet数量，理论上与分辨率，MSAA等有关</p></li><li><p><code>GPU % Bus Busy</code><br>  Approximate Percentage of time the GPU’s bus to system memory is busy.<br>  大致计算的GPU等待DRAM IO的情况，如果比例较高，就是带宽过大了，如果目标时60FPS，保证带宽在80M/frame，3-5G/sec</p></li><li><p><code>GPU % Utilization</code><br>  Percentage of GPU utilized as measured at peak GPU clock(585Mhz) and capacity<br>  GPU满频率跑时的比例</p></li><li><p><code>GPU Frequency</code><br>  GPU frequency in Hz</p></li><li><p><code>L1 Texture Cache Miss Per Pixel</code><br>  Average number of Texture L1 cache misses per pixel.<br>  Lower values for this metric imply better memory coherency. If this<br>  value is high, consider using compressed textures, reducing texture<br>  usage, etc.<br>  每个像素L1 Texture Cache未命中的数量。缓存利用率与数据请求的内存相关性有关<br>  L1 Cache大致建议在20%左右</p></li><li><p><code>Pre-clipped Polygons/Second</code><br>  Number of polygons submitted to the GPU, per second, before any hardware clipping.<br>  每秒提交到GPU准备进行Culling的面数，可见面数/提交总面数的比例高于50%时是比较健康的<br>  否则，给SOC、HOC一些压力，多在渲染前剔除无用的数据</p></li><li><p><code>Preemptions / second</code><br>  The number of GPU preemptions that occurred, per second.<br>  每秒发生GPU抢占的次数，抢占过多可能是GPU负载太重了</p></li><li><p><code>Read Total (Bytes/sec)</code><br>  Total number of bytes read by the GPU from memory, per second.<br>  每秒总读带宽，读带宽一般比写带宽高一些，因为Vertex分Tile需要将数据写入DRAM并多次读出，贴图的读取也属于读带宽</p></li><li><p><code>Reused Vertices / Second</code><br>  Number of vertices used from the post-transform vertex buffer<br>  cache.<br>  A vertex may be used in multiple primitives; a high value for this<br>  metric (compared to number of vertices shaded) indicates good re-use of<br>  transformed vertices, reducing vertex shader workload.<br>  复用的顶点的比例，模型的大部分顶点都可以焊接起来，这样不同的三角形就可以公用顶点，减少数据量与Shader负载<br>  这个值相比于总处理的顶点数，占比越高当然越好，如果比较低，就处理一下模型，尽量公用顶点</p></li><li><p><code>SP Memory Read (Bytes/Second)</code><br>  Bytes of data read from memory by the Shader Processors, per second.<br>  Shader Processor每秒所读取的内存总数</p></li><li><p><code>Texture Memory Read BW (Bytes/Second)</code><br>  Bytes of texture data read from memory per second.<br>  Includes bytes of platform compressed texture data read from memory.<br>  贴图总读带宽，一般都是贴图读带宽是读带宽中比较高的</p></li><li><p><code>Textures / Fragment</code><br>  Average number of textures referenced per fragment.<br>  每个Frament平均使用的贴图数量</p></li><li><p><code>Textures / Vertex</code><br>  Average number of textures referenced per vertex.<br>  每个Vertex平均使用的贴图的数量</p></li><li><p><code>Vertex Instructions / Second</code><br>  Total number of scalar vertex shader instructions issued, per<br>  second.<br>  Includes full precision ALU vertex instructions and EFU vertex<br>  instructions. Does not include medium precision instructions (since<br>  they are not used for vertex shaders). Does not include vertex fetch or<br>  texture fetch instructions.<br>  每秒Vertex shader指令总数（不包含Vertex fetch和贴图fetch指令）</p></li><li><p><code>Vertex Memory Read (Bytes/Second)</code><br>  Bytes of vertex data read from memory per second.<br>  每秒从DRAM中读取的顶点数据的总大小</p></li><li><p><code>Vertices Shaded / Second</code><br>  Number of vertices submitted to the shader engine, per second.<br>  每秒提交给Shader Core的顶点数</p></li><li><p><code>Write Total (Bytes/sec)</code><br>  Total number of bytes written by the GPU to memory, per second.<br>  总写带宽，写带宽如果高于读带宽，就是不正常的，关注一下Shader的Register Spill，load/store，image store等<br>  甚至可能是GPU驱动的BUG，或Shader写法触发的编译器的BUG</p></li></ul><blockquote><p>Snapdragon Profiler Snapshot 可查看 DrawCall 所执行的 Shader 寄存器使用信息</p></blockquote><h2 id="Mali-GPU"><a href="#Mali-GPU" class="headerlink" title="Mali GPU"></a>Mali GPU</h2><p>[【公司】MTK技术专场研讨会回顾（1112）]</p><p>下方的 Midgard/Bifrost/Valhall ISA Config标明了不同架构GPU的可用线程数与可用寄存器的信息</p><p>比如Mali-G78，可用Work寄存器是64个（每个32bit，即一个vec4）</p><blockquote><p>当你的Shader使用的Work寄存器数量大于64时，就会发生Register Spill，会有额外的带宽消耗与性能损耗</p></blockquote><p>Uniform寄存器的的上限是128/Draw，它是独立的资源，被一个Shader Program所发起的所有线程共享</p><blockquote><p>当你的Shader使用的Uniform寄存器数量大于128时，GPU会需要从LSC中读取超出的寄存器数据，产生额外带宽消耗</p></blockquote><p>可使用Mali-offline-compiler查看Shader的寄存器信息：</p><p>PerfDog也支持输出部分Mali GPU counter数据：</p><blockquote><p>与 HWCPipe使用相同硬件接口</p></blockquote><h3 id="G77-GPU-Counters介绍"><a href="#G77-GPU-Counters介绍" class="headerlink" title="G77 GPU Counters介绍"></a>G77 GPU Counters介绍</h3><p><strong>GPU Activity</strong></p><p>从整体上分析GPU队列的处理情况，并且看到Fragment和非Fragment处理的比例</p><p>G77上的任务负载通过 Job Manager管理调度</p><p>它为驱动层暴漏了两个FIFO的任务队列，叫Job Slots</p><p>一个Slot为非Fragment任务服务（Compute、Vertex），一个为Fragment着色任务服务</p><p>这两个队列和CPU的交互是异步的，并且他们可以并行执行</p><p>下图展示了不同任务下GPU处理数据的路径，以及与路径相关的性能Counter</p><p>注意有的Counter统计的是整个数据路径下的情况，并不代表某个硬件单元</p><p>比如Fragment queue active cycles会在GPU任何硬件单元有运行fragment任务时增加cycle count</p><p>另外，有些Counter会统计到多条数据路径的表现信息</p><p>比如Fragment/Non-Fragment着色程序都是在Unified执行核心上运行的</p><p>下面这张游道图就展示了顶层Job Manager的Counter在有重叠的渲染流程中增加计数的</p><p>这张图用不同的蓝色展示了每帧里出现的两个渲染流程</p><p>每个流程都先有Non-Fragment Work开始，以Fragment Work结束（因为要先VS才能FS）</p><p>每段任务结束后，GPU都会通知到CPU</p><p>注意，只要队列里有任务，GPU active cycles就会增加</p><p><strong>GPU Usage</strong></p><p>本组Counter从宏观上量化了GPU的整体负载</p><p>并区分了Fragment与Non-Fragment任务</p><p>本组Counter可以用来判断是否GPU瓶颈，它表示GPU有任务的总时间</p><p>也可以看出两大任务队列的任务分布比例</p><p><strong>GPU Active Cycles</strong></p><p>这个Counter会在GPU的任意队列中有未完成的任务时自增</p><p>即使GPU正在因为读取System Memory而产生延迟时，也会自增</p><p>即它表示了用户程序给到GPU整体的负载压力</p><p><strong>Non-fragment queue active cycles</strong></p><p>当GPU在Non-fragment队列中有未完成的任务时，此计数器会自增</p><p>可以量化：vertex shaders, tessellation shaders, geometry shaders, fixed function tiling, compute shaders 的整体负载情况，但无法区分</p><p>同理，当产生系统内存IO延迟时，所消耗的时钟也会记录在这个Counter中</p><p><strong>Fragment queue active cycles</strong></p><p>当GPU在Fragment队列中有未完成的任务时，此计数器会自增</p><p>对大多数图形程序来讲，Fragment的负载肯定是多于Vertex的负载</p><p>因此这个队列的负载一般是最高的</p><p><strong>当你的程序的 Fragment queue active cycles 与 GPU active cycles 值大致接近时</strong></p><p><strong>你很有可能出现了瓶颈在Fragment处理上的GPU瓶颈</strong></p><p>同理，当产生系统内存IO延迟时，所消耗的时钟也会记录在这个Counter中</p><p><strong>Tiler active cycles</strong></p><p>当分块器的队列中有未完成的任务时，此计数器会自增</p><p>分快器可以和Vertex、Fragment着色任务并行进行</p><p>当此计数器很高时，不一定代表有瓶颈出现</p><p>除非Shader Core模块的Non-fragment active cycles与它对比起来低很多时</p><p>才有可能是瓶颈</p><p><strong>Interrupt pending cycles</strong></p><p>当GPU结束任务，给CPU发送Interrupt中断指令，等待CPU回复时，计数器自增</p><p>注意这些等待的Cycle并不意味着性能的损耗，因为GPU可以并行处理队列中其他任务</p><p>只有当此计数器占据了GPU active cycles中很高的比例时，才有可能有问题</p><p>也许出现了一些影响CPU处理中断效率的问题，可能是驱动层出了问题</p><p><strong>GPU utilization</strong></p><p>这组Counter数据提供了队列中任务相关cycle与GPU总cycle的归一化后的比例</p><p>对于GPU Bound的情况，理论上某条队列应该会有接近100%的利用率</p><p>因此负载最重的队列就是我们应该优先优化的目标</p><p>当你是GPU瓶颈，且GPU总是Busy，但也不是每时每刻都有队列在运行</p><p>则有可能是程序层API的使用影响了队列的并行表现</p><p>当我们想优化此类没有排满任务的情况时（GPU Bubbles），在优化最重的队列之前</p><p>首先要保证当前的负载是可以被不同的队列并行执行的</p><p>GPU Bubbles出现的可能的原因：</p><ul><li><p>CPU程序在等待GPU任务执行完毕，比如说在请求一个还未完成的数据结果。这也许会导致一个或多个队列接不到新的任务去处理</p></li><li><p>程序提交的渲染相关负载存在数据耦合，影响了并行的表现。比如一个 Fragment-&gt;Compute-&gt;Fragment 的数据输入会导致当Compute Shader执行时，不能去处理Fragment队列中的有依赖的任务</p></li></ul><p>手机GPU系统实现了动态电压调节和频率缩放系统（DVFS，dynamic voltage and frequency scaling）在执行轻度任务时，通过降低电压和频率来降低能耗</p><p>当你看到GPU Utilization比较高时，一定先看看GPU active cycles 计数器</p><p>因为GPU可能只是因为为了省电运行在一个比较低的频率下</p><p><strong>Non-fragment queue utilization</strong></p><p>此Counter记录了None-Fragment队列相对于整体GPU active cycles的利用率</p><p>在GPU瓶颈时，期望的是GPU的不同队列都是并行运行的，因此最重负载的队列利用率应接近100%</p><p>如果没有一个负载突出的队列存在，并且GPU仍然接近100%利用率</p><p>那就表明有一些序列化或依赖问题导致队列并行效率不够理想</p><p><strong>Fragment queue utilization</strong></p><p>此Counter记录了Fragment队列相对于整体GPU active cycles的利用率</p><p><strong>Tiler utilization</strong></p><p>此Counter记录了Tiler（TBR分块模块）相对于整体GPU active cycles的利用率</p><p>注意此Counter包含了索引驱动的Vertex着色过程（IDVS）的负载，与分块固定管线的负载</p><p>不仅仅代表分块固定管线的消耗</p><p><strong>Interrupt pending utilization</strong></p><p>此Counter记录的中断请求（<a href="https://en.wikipedia.org/wiki/Interrupt_request_%28PC_architecture">IRQ</a>)）模块相对于整体GPU active cycles的利用率</p><p><strong>在一个设计精良的系统下，IRQ的利用率应该低于2%</strong></p><p>如果此值比较高，则可能有一些系统问题导致CPU无法高效的处理中断请求</p><p><strong>External memory bandwidth</strong></p><p>此类Counters记录了GPU和下游内存系统之间的内存带宽使用情况</p><p>也许是直接和外部的DRAM交互，也许是和GPU外部的Cache系统交互</p><p>访问外部DRAM是非常费电的，比较理想的情况是每 GB/s 的带宽需要100mW（0.1Watt）</p><p>对于高端设备<a href="https://community.arm.com/developer/tools-software/graphics/f/discussions/49127/arm---mali---g78-mp14-power-consumption---30fps">来讲</a>（2021年4月）想以稳定频率持续运行的（CPU+GPU+memory）能耗预算大致为3.5Watts，可以出现峰值 6-8 Watts的情况，但如果长时间运行在峰值，设备就会过热</p><blockquote><p>记住降低带宽是一个很好的优化方向</p></blockquote><p>DRAM的IO是非常费电的，即使CPU、GPU Idle的情况下也需要消耗大致 1.4 Watts / S</p><p>目前量产的 <strong>SOC</strong> 可提供总共 <strong>6-10GB/s的DRAM带宽</strong></p><p>Arm专家推荐 <strong>GPU使用3-5GB/s</strong> 的DRAM带宽，及如果目标是60FPS，那就是 <strong>每帧80MB</strong> 的预算</p><p>以及<strong>32 Bytes/Vertex</strong>的数据用量</p><p>可以看到不论是HSR还是Vertex Shading，处理完顶点后有一步写入</p><blockquote><p>此顶点数据的IO操作对DRAM也有很大的影响<br>参考：<a href="https://youtu.be/BD1zXW7Uz8Q?t=2505">Vulkanised 2023: Getting started on mobile and best practices for Arm GPUs</a></p></blockquote><p><strong>当Load/Store单元最大的压力是DRAM带宽时</strong></p><blockquote><p>需要控制面数，面的密度。以及VertexShader中Varying参数的大小<br>（尽量用半精度，理论上只有position、depth需要全精度）<br>以控制外部DRAM写入带宽</p></blockquote><p><strong>Output external read bytes</strong></p><p>此Counter记录了GPU对外的总体读带宽：</p><p><strong>Output external write bytes</strong></p><p>此Counter记录了GPU对外的总体写带宽：</p><p><strong>External memory stalls</strong></p><p>此类Counters记录了当GPU想要从下游读写内存时，产生的等待情况的比例</p><p>如果Stall比例较高，则表明我们请求了过多的下游内存数据，超出了硬件系统可提供的范围</p><p>因此需要做一些优化内存带宽的工作</p><p><strong>Output external read stall rate</strong></p><p>此Counter记录了下游内存读取操作时产生等待的时间的比例</p><p><strong>Output external write stall rate</strong></p><p>此Counter记录了下游内存写入操作时产生等待的时间的比例</p><p><strong>External memory read latency</strong></p><p>此类Counters记录了GPU内存在进行读操作时产生的延迟比例</p><p>如果读延迟达到256cycles以上，则表明我们请求了太多内存数据，导致内存系统超负荷工作</p><p>此时就需要优化带宽</p><p><strong>Content behavior</strong></p><p>渲染性能低下通常由以下三点问题导致：</p><ul><li><p>要处理的内容很高效的被写入，但对于目标设备来讲花费了过多的机能去运算</p></li><li><p>内容写入不高效，有一些冗余的数据也被传输到渲染系统中，导致其比正常渲染更慢</p></li><li><p>CPU侧的代码对API的使用导致了高负载的任务，或者因为GPU、驱动问题导致等待的GPU Bubbles</p></li></ul><p>Streamline中此类别的Counter模板就是为了解决前两种问题</p><p>来量化提交的负载的大小和效率</p><p><strong>Geometry usage</strong></p><p>GPU渲染管线会首先处理顶点数据流</p><p>此类计数器记录了提交的Geometry总量与被剔除的总量</p><p>Geometry是GPU数据中最昂贵的输入之一，因为顶点需要32-64 bytes大小的数据读取操作，而内存读取是非常昂贵的</p><p>因此，高顶点数的高精度模型应该只在需要的时候再去提交它</p><p>倾向使用Normal Map而不是高精度的模型，多利用LOD，远处不要用太复杂的模型</p><p><strong>Total input primitives</strong></p><p><strong>Total culled primitives</strong></p><p><strong>Visible primitives</strong></p><p><strong>Geometry culling</strong></p><p>所有输入的Geomerty都必须经过剔除处理后才能知道它在相机裁剪空间的位置</p><p>因此被剔除的物体就是一项额外的消耗，即使其没有对最终的画面有贡献</p><p>这组Counters可以帮助我们了解为何三角形被剔除掉了</p><p>帮助你正确的找到出问题的地方</p><blockquote><p><a href="https://community.arm.com/developer/tools-software/graphics/f/discussions/49160/shader-data-path-utilization-counters">Mali建议</a>Visible primitives after culling保持在50%的水平<br>Sample test cull rate过高则表示有太多密度过高的模型存在，导致其虽然在视锥中，且面向相机<br>但因为太小了没有对目标像素有贡献，从而被硬件剔除掉，浪费了GPU算力与带宽<br>利用好LOD设置，建议一个三角形大约能覆盖10-15个像素</p></blockquote><p>Mali的剔除管线流程如下图，下面介绍的Counters则表示了每一步里被干掉的模型比例</p><p><strong>IDVS shading</strong></p><p>Mali Bifrost GPU 使用了优化后的 IDVS（index-driven vertex shading） 处理管线</p><p>顶点着色被分为两步：Position、Varying Shading</p><p>Varying Shading仅发生在剔除存活后的三角形上</p><p>此组Counters记录了IDVS管线输入给Shader Core的顶点着色任务量</p><p>此管线存在变换后的顶点缓存，保存了近期被着色的顶点数据，来避免相同顶点的重复着色</p><p><strong>当模型的Index Buffer空间相关性比较差时，会导致顶点被着色多次</strong>，因为他可能已经被Cache刷掉</p><blockquote><p>考虑检测模型顶点的空间相关性，统一做自动化处理，减少重复着色？</p></blockquote><p><strong>Position shader thread invocations</strong></p><p><strong>Varying shader thread invocations</strong> <strong>Fragment overview</strong></p><p>此类Counters记录了这些GPU相关的工作负载：</p><p>被着色的像素总数、平均花费在一个像素上的GPU Cycles 数量，以及每个像素着色平均有多少面的贡献</p><p>可以设置一个Cycle预算给你们的APP，使用Cycles/Pixel为单位</p><p>利用下面的公式计算：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 以安卓高配上游设备 Mali-G77MC9 为例，频率836MHz，9核</span><br><span class="line">// 1368x648，60FPS</span><br><span class="line">shaderCyclesPerSecond = MaliCoreCount MaliFrequency</span><br><span class="line">pixelsPerSecond = Screen_Resolution * Target_FPS</span><br><span class="line"></span><br><span class="line">shaderCyclesPerSecond = 9 * 836 * 1000000</span><br><span class="line">pixelsPerSecond = 1368 * 648 * 60</span><br><span class="line"></span><br><span class="line">// Max cycle budget assuming perfect execution</span><br><span class="line">maxBudget = shaderCyclesPerSecond / pixelsPerSecond</span><br><span class="line">maxBudget = 141</span><br><span class="line"></span><br><span class="line">// Real-world cycle budget assuming 85% utilization</span><br><span class="line">realBudget = 0.85 * maxBudget</span><br><span class="line">realBudget = 120</span><br></pre></td></tr></table></figure><p><strong>Pixels</strong></p><p>此Counter表示所有RenderPass所着色的像素数量</p><p>注意这个值可能和实际值有出入，因为内部计数硬件会对Screen宽高做Round，让他是32的倍数</p><p>即使那些像素不在屏幕里或者被裁剪掉了，也会计算上去</p><p><strong>Cycles per pixel</strong></p><p>此Counter表示每渲染一个像素所消耗的GPU cycles数量，包括顶点着色的消耗</p><p>可以用上面的公式估算出来预算</p><p><strong>Fragments per pixel</strong></p><p>此Counter表示每个像素一共有多少片元（Fragment）有贡献，即Overdraw的情况</p><p>注意：此Counter认为 tile 大小是 16x16，对于大于256bit每像素的Pass</p><p>Tile大小会自动调小，这个值就不准确了 。。。</p><p>G76： <code>($MaliCoreWarpsFragmentWarps * 8) / ($MaliCoreTilesTiles * 256)</code></p><p>G77： <code>($MaliCoreWarpsFragmentWarps * 16) / ($MaliCoreTilesTiles * 256)</code></p><p><strong>Fragment depth and stencil testing</strong></p><p>此组Counters用来看Fragment的Quads在着色时，与Early-ZS/Late-ZS（Depth、Stencil）模块工作的情况</p><p>让尽可能多的Fragments被Early-ZS剔除掉这很重要，因为它比Late-ZS要高效得多</p><p><strong>因此Mali GPU建议将不透明物体由近至远进行排序再提交渲染</strong></p><p><strong>Early ZS tested quad percentage</strong></p><p>此Counter表示进行Early ZS测试的光栅化后的Quads的比例</p><p><strong>Early ZS updated quad percentage</strong></p><p>此Counter表示更新了FrameBuffer的光栅化后的Quads的比例</p><p><strong>Early ZS killed quad percentage</strong></p><p><strong>FPK killed quad percentage</strong></p><p>此Counter表示被Forward Pixel Kill（FPK）Hidden Surface Removal干掉的光栅化后的Quads的比例</p><p><strong>Late ZS tested quad percentage</strong></p><p><strong>Late ZS killed quad percentage</strong></p><p>此Counter表示被Late ZS干掉的光栅化后的Quads的比例</p><p>进行Late ZS检测的Quads在被干掉前，将执行部分Fragment Shader运算</p><p>因此如果Late ZS可以干掉很多Quads，意味着这里有不少的性能开销与能耗的浪费</p><p>你应该将Late ZS的Quads数量降到最低</p><p>导致Late ZS的主要原因有：</p><ul><li><p>明确使用了Discard命令</p></li><li><p>隐式使用了Discard命令（Alpha-to-coverage）</p></li><li><p>片元的Depth数值是Shader计算出来的</p></li><li><p>影响共享资源，如共享的 Storage Buffer、图片、原子变量等</p></li></ul><p>当你在Pass开始渲染时忘记清理Framebuffer的depth时，会导致驱动生成预加载ZS值的Wrap</p><p>这些额外消耗将被计算到 Late ZS 的Counter中，因此如果不需要，一定先Clear数据再渲染</p><p><strong>Shader core data path</strong></p><p>此组Counters与执行Fragment、NonFragment负载的Mali Shader Core线程发起单元有关</p><p>Non-fragment负载包含：vertex shading, geometry shading, tessellation shading, compute shading</p><p><strong>Shader core workload</strong></p><p>此组Counters表示为这两种负载发起的Wraps总数量</p><p>每个Wrap表示N个以帧同步执行的Shader线程，Wrap宽度（N）与具体GPU有关</p><p>对于Mali G76来讲，Wrap宽度是8</p><p><strong>Non-fragment warps</strong></p><p>对Compute Shader来讲，为了更全面的利用机能</p><p>所有的Compute任务组数量应该是Wrap大小的倍数</p><p><strong>Fragment warps</strong></p><p><strong>Shader core throughput</strong></p><p>此组Counters表示ShaderCore平均执行一个线程所花费的Cycles数量</p><p>注意这里指的是平均的吞吐量，而不是消耗</p><p>因此Cycles中也包含了与其相关的延迟消耗（比如内存相关延迟）</p><p><strong>Non-fragment cycles per thread</strong></p><p>此Counter表示ShaderCore平均处理一个Non-fragment线程所花费的Cycles数量</p><p>注意这里测量的是吞吐量，当值很高时不一定代表性能消耗很大</p><p>有可能是过高的内存读写延迟导致的高Cycles数量</p><p>并且还包含并行执行的Fragment、None-Fragment任务之间通信交流的消耗</p><p>因此此Counter是一个指示性的指标，不代表准确的消耗</p><p><strong>Fragment cycles per thread</strong></p><p><strong>Shader data path utilization</strong></p><p>此类Counters与ShaderCore中活动（Activity）层面的数据路径相关</p><p>帮助我们定位该关心的负载类型，以及这其中是否有任何任务安排上的问题</p><p><strong>Non-fragment utilization</strong></p><p><strong>Fragment utilization</strong></p><p><strong>Fragment FPK buffer active percentage</strong></p><p>此Counter表示花费在执行核心（Execution Core）之前的</p><p>Forward Pixel Kill Quad Buffer上的Cycle百分比，其包含至少一个Quad</p><p>根据<a href="https://community.arm.com/developer/tools-software/graphics/f/discussions/49160/shader-data-path-utilization-counters">Arm的提示</a>，应保持此percentage尽可能地高</p><p><strong>Execution core utilization</strong></p><p>此Counter描述了可编程执行核心的利用率百分比</p><p>如果利用率比较低，则可能表示有性能损耗</p><p>因为我们有额外的Shader Core Cycle可以被用来做运算</p><p>在一些情况下，此额外消耗是无法避免的</p><p>因为Render Pass确实是有一些区域不需要进行Shader运算</p><p><strong>将优化的重点放在那些有大量冗余Geomerty的屏幕区域</strong></p><p><strong>因为Fragment前端无法更高效的生成Wrap</strong></p><p><strong>导致了可编程核心没有任务去执行</strong></p><p>这有可能是有大量的三角形被ZS或HSR剔除掉了</p><p>或者因为三角形的密度过高导致可生成的线程数量有限</p><p><strong>Shader core functional units</strong></p><p>此组Counters为我们展示了可编程Shader Core中不同的可编程、固定管线运算单元的执行情况</p><p>都是与执行Shader程序相关的硬件单元</p><p><strong>Shader unit utilization</strong></p><p>此组Counters以归一化的指标，描述了Shader Core中不同硬件单元的任务执行情况</p><p>负载最重的硬件单元是我们要关注的优化重点</p><p>当然，降低其中任意单元的负载也会对发热和功耗提供不少的帮助</p><p><strong>Execution engine utilization</strong></p><p><strong>Varying unit utilization</strong></p><p><strong>Texture unit utilization</strong></p><p><strong>Load/store unit utilization</strong></p><p>负责从L2/外部DRAM读取、写入数据</p><blockquote><p>即不包括从LSC（Shader Core中的Load/Store Leve 1 Cache）的消耗，LSC一般是16KB的配置</p></blockquote><p>L2缓存是共享的缓存，包括shaders, descriptors, buffers, textures等数据，一般是2-4MiB的配置</p><p><strong>Shader workload properties</strong></p><p>此组Countes以归一化的指标，告诉我们可能影响负载执行效率的数据</p><p>也会提示我们一些潜在的有优化空间的地方</p><p><strong>Partial coverage rate</strong></p><p>此Counter表示包含没有覆盖率的Wraps的比例</p><p>如果这个比例比较高，即表示你的资源三角形密度过高，这是很耗费性能的</p><p>为了避免这种情况，使用LOD技术，让远处的资源使用精简的模型</p><p><strong>Full quad warp rate</strong></p><p>此Counter表示Quads是否完全利用了所有Wrap的比例</p><p>如果有很多Wrap没有完全利用，那么性能可能就会比较低下</p><p>因为Wrap中的可用线程没有被完全利用起来</p><p>提高Full Wrap可能的方法：</p><ul><li><p>Compute Shader 使用Wrap宽度倍数的WorkGrouops</p></li><li><p>DrawCall避免出现高密度的模型</p></li></ul><p><strong>Warp divergence percentage</strong></p><p>此Counter表示了Wrap中有出现执行分支情况的指令数的比例（G77）</p><p><strong>Diverged instruction issue rate</strong></p><p>此Counter表示了Wrap中有出现执行分支情况的指令数的比例（G76）</p><p><strong>All registers warp rate</strong></p><p>此Counter表示需要多于32个寄存器的Wrap的比例</p><p>当这个值比较高时，无法开启更多线程将会导致GPU持续忙碌</p><p>尤其是在同时内存延迟很高的情况下</p><p><strong>Constant tile kill rate</strong></p><p>此Counter表示被<a href="https://developer.arm.com/documentation/101897/0200/fragment-shading/transaction-elimination">TE</a> CRC（<a href="https://www.arm.com/why-arm/technologies/graphics-technologies/transaction-elimination">Transaction Elimination</a>）检查所干掉的Tile比例</p><p>如果这个值的比例比较高，就意味着你的Framebuffer每一帧都有大量的区域没有改变</p><p>尝试考虑使用裁剪矩形（Scissor Rectangles）来减少重绘的区域</p><p>与其相关的<a href="https://community.arm.com/cn/b/blog/posts/flush">GL扩展</a>：</p><ul><li><p><a href="https://www.khronos.org/registry/EGL/extensions/KHR/EGL_KHR_partial_update.txt">EGL_KHR_partial_update</a></p></li><li><p>EGL_EXT_swap_buffers_with_damage</p></li></ul><p><strong>TE是Mali的一项用于优化带宽的技术，它可以计算Tile是否相较于上一帧有所改变</strong></p><p><strong>从而重复利用那些没有改变的Tile数据，来节约运算机能的技术</strong></p><p><strong>Shader core varying unit</strong></p><p>此组Counters描述Varying Unit的使用情况</p><p>此硬件单元被用于Fragment Shader之间的插值上</p><p>此插值器有32-bit宽度的数据通道，因此16-bit的插值性能理论上是32-bit数据的两倍</p><p>因此建议在Fragment shader中使用中精度Varying的数据格式</p><p>并且建议将16-bit的值Pack到vec2/vec4中</p><p><strong>Varying unit usage</strong></p><p><strong>Varying cycles</strong></p><p><strong>16-bit interpolation active</strong></p><p><strong>32-bit interpolation active</strong></p><p>当你的Varying unit是瓶颈时，考虑给Fragment Shader输入更多的16-bit数值以提升性能</p><p><strong>Shader core texture unit</strong></p><p>此组Counters描述了贴图单元的使用情况 包含了所有贴图采样以及过滤操作的负载</p><p><strong>Texture unit usage</strong></p><p>此组Counters表示贴图单元的使用情况，即每个指令所消耗的平均Cycle数</p><p>不同的GPU Cycles/Sample的性能不同，比如Mali G76的最佳性能时0.5 Cycles/Sample（双线性过滤）</p><p><strong>Texture filtering cycles</strong></p><p>此Counter表示所有与贴图过滤有关的Cycle总数</p><p>有的指令需要多于一个Cycle才可以完成，因为需要获取数据、并且做过滤</p><p>一次4个采样的Quad的消耗为：</p><ul><li><p>2D双线性过滤 2 Cycles</p></li><li><p>2D三线性过滤 4 Cycles</p></li><li><p>3D双线性过滤 4 Cycles</p></li><li><p>3D三线性过滤 8 Cycles</p></li></ul><p><strong>Texture filtering cycles per instruction</strong></p><p>此Counter表示每个指令平均花费在贴图采样上的Cycles总数</p><p>对于贴图单元是瓶颈的情况，当他的CPI比Texture samples per cycle低时</p><p>考虑使用Cycles消耗更小的贴图过滤器</p><p>不同过滤操作的更详细的性能数据见Texture issue cycles小结</p><p><strong>Texture unit workload properties</strong></p><p>此类Counters表示贴图单元中数据的表现情况</p><p>比如使用贴图压缩、Mipmap、三线性过滤等操作的数量</p><p><strong>Texture accesses using trilinear filter percentage</strong></p><p><strong>Texture accesses using mipmapped texture percentage</strong></p><p><strong>Texture unit memory usage</strong></p><p>此类Counter表示平均一个贴图采样操作所产生的L2 Cache或外部内存读取的数据大小</p><p><strong>Texture bytes read from L2 per texture cycle</strong></p><p>此Counter表示平均每个过滤Cycle中L2内存读取的数据大小</p><p>通过此Counter可判断贴图的L1 Cache情况有多好</p><p>如果每次内存读取都需要很大的L2内存带宽，你就需要看一下当前的贴图设置情况：</p><ul><li><p>离线的贴图打开mipmap</p></li><li><p>使用ASTC、ETC压缩离线贴图</p></li><li><p>修改运行时生成的FrameBuffer、贴图格式为更小的格式</p></li><li><p>降低为了锐化贴图的负的LOD偏移</p></li><li><p>降低各向异性过滤的MAX_ANISOTROPY等级</p></li></ul><p><strong>Texture bytes read from external memory per texture cycle</strong></p><p>此Counter表示平均每个过滤Cycle中系统内存读取的数据大小</p><p>通过此Counter可判断贴图的L2 Cache情况有多好</p><p>如果每次内存读取都需要很大的系统内存带宽，你就需要看一下当前的贴图设置情况</p><p><strong>Shader core load/store unit</strong></p><p>此组Counters表示了Load/Store单元中数据使用情况</p><p>此单元负责所有Shader 内存IO操作，除贴图和Framebuffer写回之外</p><p>表示Shader Core独有的LSC（Load/Store L1 Cache，16K）</p><p><strong>Load/store unit usage</strong></p><p>此Counters描述了Load/Store单元进行读写操作的总次数</p><p>以及这些加载操作是否利用了可用数据路径的所有宽度</p><p>Compute Shader中一个关键的内存IO优化就是，更高效的利用Load/Store硬件提供的数据宽度</p><p>我们推荐在线程中向量化内存IO操作</p><p>并且保证相同Wrap中不同线程里的有交叠或依赖的内存时，只读取64Byte范围内的数据</p><p><strong>Load/store total issues</strong></p><p>此Counter表示产生Load/Store操作的Cycles数</p><p>注意此Counter会忽略Cache Miss的情况，因此它提供了一个最佳情况下的Cycle消耗数据</p><p><strong>Load/store full read issues</strong></p><p>此Counter表示所有全宽Load/Store的缓存读取操作的Cycles数</p><p><strong>Load/store partial read issues</strong></p><p>此Counter表示所有未完全利用Load/Store数据路径宽度的缓存读取操作的Cycles数量</p><p>这种情况未完全利用硬件性能，可通过如下Shader修改提高利用率：</p><ul><li><p>使用向量化的数据加载</p></li><li><p>Avoid padding in strided data accesses</p></li><li><p>Compute Shader中一个Wrap中相邻的线程使用相邻的内存地址区域</p></li></ul><p><strong>Load/store full write issues</strong></p><p>此Counter表示所有全宽Load/Store的缓存写入操作的Cycles数</p><p><strong>Load/store partial write issues</strong></p><p>此Counter表示所有未完全利用Load/Store数据路径宽度的缓存写入操作的Cycles数量</p><p>这种情况未完全利用硬件性能，可通过如下Shader修改提高利用率</p><p><strong>Load/store atomic issues</strong></p><p>此Counter表示所有Load/Store原子操作相关的Cycles总数</p><p>原子内存读写在Wrap中的每个线程里通常是多Cycle的操作</p><p>因此它天生很耗时，避免在性能要求较高的地方使用原子内存操作</p><p><strong>Load/store unit memory usage</strong></p><p>此组Counters表示每个Load/Store读或写操作中平均写入或读出L2Cache的数据大小</p><p>可用于评估负载对L1、L2Cache的利用情况</p><p><strong>Load/store bytes read from L2 per access cycle</strong></p><p>此Counter表示每个Load/Store读操作中平均读出L2Cache的数据大小</p><p>可用于评估数据在L1 Load/Store Cache中缓存命中的情况</p><p>如果每次获取数据都有很高的Bytes流量，则有可能与Buffer格式有关</p><p>检查一下数据类型和数据获取的方式</p><p><strong>Load/store bytes read from external memory per access cycle</strong></p><p>此Counter表示每个Load/Store读操作中平均读出系统内存的数据大小</p><p>可用于评估数据在L2 Load/Store Cache中缓存命中的情况</p><p>如果每次获取数据都有很高的Bytes流量，则可能与你的贴图格式有关</p><p>同样检查一下数据类型和数据获取的方式</p><p><strong>Load/store bytes written to L2 per access cycle</strong></p><p>此Counter表示Load/Store单元每个写Cycle中平均写入L2缓存的数据大小</p><p><strong>Shader core memory traffic</strong></p><p>此类Counters表示不同ShaderCore模块里对L2和系统内存产生的内存IO操作的总数据大小</p><p>可用于判断内存瓶颈具体在哪里</p><p><strong>Load/store read bytes from L2 cache</strong></p><p>此Counter表示Load/Store单元中从L2缓存中读取的数据总大小</p><p><strong>Texture read bytes from L2 cache</strong></p><p>此Counter表示贴图单元中从L2缓存中读取的数据总大小</p><p><strong>Load/store read bytes from external memory</strong></p><p>此Counter表示Load/Store单元中从系统内存中读取的数据总大小</p><p><strong>Texture read bytes from external memory</strong></p><p>此Counter表示贴图单元中从系统内存中读取的数据总大小</p><p><strong>Load/store write bytes</strong></p><p>此Couner表示Load/Store单元中写入L2缓存的数据总大小</p><p><strong>Tile buffer write bytes</strong></p><p>此Counter表示TileBuffer写回单元中写入L2缓存的数据总大小</p><h2 id="Android-GPU-Inspector-AGI"><a href="#Android-GPU-Inspector-AGI" class="headerlink" title="Android GPU Inspector (AGI)"></a>Android GPU Inspector (AGI)</h2><p><a href="https://developer.android.com/agi">https://developer.android.com/agi</a></p><p>Android 12系统的部分硬件：<a href="https://developer.android.com/agi/supported-devices">https://developer.android.com/agi/supported-devices</a></p><p>可直接使用AGI输出Adreno、Mali设备的GPU Counter</p><blockquote><p>在设备允许的前提下优先使用 AGI 进行GPU性能分析</p></blockquote><h2 id="Metal-GPU"><a href="#Metal-GPU" class="headerlink" title="Metal GPU"></a>Metal GPU</h2><p><strong>Metal Counters</strong>可以让我们非常<strong>精确</strong>的<strong>了解GPU</strong>的使用率，并能指引我们<strong>发现Metal游戏</strong>的<strong>性能瓶颈</strong>以及<strong>优化方向</strong></p><p><a href="https://developer.apple.com/videos/play/wwdc2020/10603/">《Optimize Metal apps and games with GPU counters》</a>主要介绍 Instrument 中 Metal System Trace 与 XCode 12 中的 Metal Debugger 的使用方法</p><p>在<strong>抓到数据</strong>后，告诉你如何<strong>甄别</strong>GPU运算管线中 <strong>过度使用</strong> 和 <strong>未充分利用</strong>的 部分</p><p>[【公司】Apple 芯片和渲染性能优化技术专场]</p><p><strong>WWDC 2021</strong></p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2021/10148/">Optimize high-end games for Apple GPUs</a></li></ul><p><strong>WWDC 2020</strong></p><ul><li><p><a href="https://developer.apple.com/videos/play/wwdc2020/10631">Bring your Metal app to Apple silicon Macs</a></p></li><li><p><a href="https://developer.apple.com/videos/play/wwdc2020/10605">Gain insights into your Metal app with Xcode 12</a></p></li><li><p><a href="https://developer.apple.com/videos/play/wwdc2020/10602">Harness Apple GPUs with Metal</a></p></li><li><p><a href="https://developer.apple.com/videos/play/wwdc2020/10632">Optimize Metal Performance for Apple silicon Macs</a></p></li></ul><p><strong>WWDC 2019</strong></p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2019/606">Delivering Optimized Metal Apps and Games</a></li></ul><p><strong>WWDC 2018</strong></p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2018/608">Metal Shader Debugging and Profiling</a></li></ul><h2 id="Best-Practice-1"><a href="#Best-Practice-1" class="headerlink" title="Best Practice"></a>Best Practice</h2><p>降低复杂度、降低 Uber Shader 的使用（会增加寄存器压力，寄存器使用量是编译时确定的数据）</p><p>提升半精度指令的比率：包括Varing变量、Sampler、UniformBuffer</p><p>优先使用离线方案、隔帧、降频渲染、VRS</p><p>确保所有资产使用贴图压缩（ASTC、ETC2），利用硬件提供的无损、有损Framebuffer、RT压缩方案</p><h3 id="实例一：UE4-27-DirectX-Shader-Compiler-Mobile-半精度支持"><a href="#实例一：UE4-27-DirectX-Shader-Compiler-Mobile-半精度支持" class="headerlink" title="实例一：UE4.27 DirectX Shader Compiler Mobile 半精度支持"></a>实例一：UE4.27 DirectX Shader Compiler Mobile 半精度支持</h3><p>大致从UE4.25开始，虚幻引擎开始逐步将Shader交叉编译器从HLSLCC（基于Mesa3d的方案）替换为DXC（Shader Conductor），本文介绍移动平台使用DXC时所做的一些优化：</p><blockquote><p>xinhou &amp; normanyin 合作撰写的相关章节 将发布于《游戏开发精粹3》中，尽请期待</p></blockquote><h3 id="实例二：使用-Variable-Rate-Shading-插件降低-GPU-负载"><a href="#实例二：使用-Variable-Rate-Shading-插件降低-GPU-负载" class="headerlink" title="实例二：使用 Variable Rate Shading 插件降低 GPU 负载"></a>实例二：使用 Variable Rate Shading 插件降低 GPU 负载</h3><p><a href="https://community.arm.com/arm-community-blogs/b/graphics-gaming-and-vr-blog/posts/arm-immortalis-g715-developer-overview">https://community.arm.com/arm-community-blogs/b/graphics-gaming-and-vr-blog/posts/arm-immortalis-g715-developer-overview</a></p><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><p>Android、iOS内存管理核心：</p><ol><li><p>分页（Paging）</p></li><li><p>内存映射（Memory Mapping）</p></li></ol><p>CPU &amp; GPU 公用一套内存硬件（GPU有少量OnChip Memory）</p><p>当内存不足时触发分页（Page Out）释放内存：</p><ol><li>触发 <strong>内存压缩</strong></li><li>删除Clean Page</li></ol><p>当剩余内存低于阈值，系统将开始杀进程</p><p><strong>Android：</strong></p><p><strong>iOS：</strong></p><h2 id="堆内存分析"><a href="#堆内存分析" class="headerlink" title="堆内存分析"></a>堆内存分析</h2><h3 id="Android-Studio-1"><a href="#Android-Studio-1" class="headerlink" title="Android Studio"></a>Android Studio</h3><p>Android Studio 支持 Native（C++） 堆内存分配的分析工作</p><p><a href="https://developer.android.com/studio/profile/memory-profiler">https://developer.android.com/studio/profile/memory-profiler</a></p><p>Perfetto组件可使用Heapperfd进行Native内存分析工作：</p><p><a href="https://perfetto.dev/docs/design-docs/heapprofd-design">https://perfetto.dev/docs/design-docs/heapprofd-design</a></p><h3 id="LoliProfiler"><a href="#LoliProfiler" class="headerlink" title="LoliProfiler"></a>LoliProfiler</h3><p>支持整合至 <a href="https://github.com/Tencent/loli_profiler/blob/master/docs/GAME_ENGINE_CN.md">UE、Unity</a> 引擎分析 Native（C++）内存</p><p><a href="https://github.com/Tencent/loli_profiler">https://github.com/Tencent/loli_profiler</a></p><h3 id="Custom-Built-Profiler"><a href="#Custom-Built-Profiler" class="headerlink" title="Custom Built Profiler"></a>Custom Built Profiler</h3><p>基于LoliProfiler开发经验</p><p>堆内存分析器需要解决的核心问题：</p><ol><li><p>堆栈回溯速度：基于Framepointer方案即可</p></li><li><p>符号翻译速度：离线翻译符号、二分排序搜索加速</p></li><li><p>运行时内存占用 or 网络带宽占用</p></li></ol><p>LoliProfiler 源码均已提供对应解决方案，可整合至引擎内部</p><p>在内存中存储PersistentMap，实测内存Overhead：350 MiB，性能Overhead基本不变</p><p>输出 LoliProfiler 兼容的数据格式，即可通过 LoliProfiler打开CI数据，分析内存过大、泄漏等问题</p><h4 id="UE5-Memory-Insights"><a href="#UE5-Memory-Insights" class="headerlink" title="UE5 Memory Insights"></a>UE5 Memory Insights</h4><p><a href="https://docs.unrealengine.com/5.0/en-US/memory-insights-in-unreal-engine/">https://docs.unrealengine.com/5.0/en-US/memory-insights-in-unreal-engine/</a></p><p>UE5实现了类似上述方案的基于堆栈回溯堆内存分析器</p><h3 id="Unity-Mono-内存"><a href="#Unity-Mono-内存" class="headerlink" title="Unity Mono 内存"></a>Unity Mono 内存</h3><p>Mono虚拟机（IL2CPP）提供内存快照接口</p><p>UnityMemPerf用C++&amp;QT完美还原了Unity IL2CPP内存工具PerfAssist的体验，无需Unity、无需SDK，连接USB拉起APP即可抓取托管内存快照，进行内存分析、快照Diff</p><h3 id="Memreport"><a href="#Memreport" class="headerlink" title="Memreport"></a>Memreport</h3><p>提供 UE4 Memreport 数据解析、Diff与可视化功能：</p><h3 id="RHI-Memory"><a href="#RHI-Memory" class="headerlink" title="RHI Memory"></a>RHI Memory</h3><p>可针对性的对 UE Vulkan、GL、Metal RHI层内存申请接口结合 FRHIResource 的DebugName</p><p>实现一套数据Dump机制，以链接 RHI 内存与 UE RHI资源，深入分析RHI内存</p><h3 id="XCode-Allocations"><a href="#XCode-Allocations" class="headerlink" title="XCode Allocations"></a>XCode Allocations</h3><p>类似 Simpleperf 在 iOS 可查看堆内存分配数据的工具</p><p><a href="https://developer.apple.com/videos/play/wwdc2018/416/">iOS Memory Deep Dive</a></p><p><a href="https://developer.apple.com/documentation/xcode/gathering-information-about-memory-use">https://developer.apple.com/documentation/xcode/gathering-information-about-memory-use</a></p><h4 id="Instrument-Allocations-Helper"><a href="#Instrument-Allocations-Helper" class="headerlink" title="Instrument Allocations Helper"></a>Instrument Allocations Helper</h4><h2 id="Best-Practice-2"><a href="#Best-Practice-2" class="headerlink" title="Best Practice"></a>Best Practice</h2><p>内存常驻数据ZSTD、Oodle压缩、文件<a href="https://github.com/EpicGames/UnrealEngine/commit/771724018cc1a2c54af7be709cad0f094053b3ff">FileIO转Mmap</a></p><p>浮点数归一化，Lazy Load、减少UObject数量、LRU机制、Streaming</p><h3 id="案例一：运行时生成资产的-Streaming-支持"><a href="#案例一：运行时生成资产的-Streaming-支持" class="headerlink" title="案例一：运行时生成资产的 Streaming 支持"></a>案例一：运行时生成资产的 Streaming 支持</h3><p>手游有包体的限制，但又有变装、涂装的需求，既要又要</p><p>对于Mesh组装，我们可以将组装后的Mesh序列化到手机SD卡中，使其能够随时被Stream In、Out</p><p>对于ASTC（4x4、8x8）、ETC2贴图，可按Block进行拼装</p><blockquote><p>也可使用Compute Shader进行压缩，就可以支持 6x6 BlockSize的合并<br>代价是吞吐量有限，吞吐效率也有限</p></blockquote><p>拼装后的数据同样序列化至SD卡中，支持Stream In、Out</p><p>支持了既要又要的需求，在包体不变的情况下，运行时的DrawCall也降到了最低</p><h3 id="案例二：Mesh顶点数据的归一化压缩"><a href="#案例二：Mesh顶点数据的归一化压缩" class="headerlink" title="案例二：Mesh顶点数据的归一化压缩"></a>案例二：Mesh顶点数据的归一化压缩</h3><p>Mesh Position数据存在于其 Bounding Box 空间内</p><p>可通过存储 Bounding Box Center、Extent，将 Position 归一化至 ， 的数区间</p><p>Cook时使用半精度浮点数（16位）存储归一化数据</p><p>运行时仅需一个 MAD（Multiply Add）操作，即可实时解压</p><p>可以做到 Lazy Decompress，以节省相关模块的内存 </p><h1 id="功耗"><a href="#功耗" class="headerlink" title="功耗"></a>功耗</h1><p>手机硬件集成度高，重度手游发热明显，发热与功耗的关系越来越受到开发者的重视</p><p>推荐观看：[移动游戏能耗发热分析与优化]</p><p>功耗统计难点：</p><ol><li><p>硬件集成度高，被动散热上限低</p></li><li><p>难以测量单模块功耗</p></li><li><p>静态、动态功耗叠加</p></li><li><p>能耗和利用率、频率呈线性关系，和电压呈二次关系</p></li></ol><p>综合导致：功耗数据获取难度大，功耗数据体现非线性，数据分析难度也很大</p><p>工欲善其事，必先利其器，介绍常用的功耗测量方案，结合上述视频使用更佳：</p><h2 id="硬件方案"><a href="#硬件方案" class="headerlink" title="硬件方案"></a>硬件方案</h2><h3 id="电流计"><a href="#电流计" class="headerlink" title="电流计"></a>电流计</h3><p>优点：不需破坏手机</p><p>缺点：必须满电量测试</p><p>淘宝购买硬件设备（50RMB）</p><p>设备充满电（100%），将电流计与充电头连接。</p><p>在系统的蓝牙管理面板中查找名为“UC96_SPP”的设备，配对连接并且获取其Mac地址记下。</p><blockquote><p>分析蓝牙协议后，可实现脚本数据采集</p></blockquote><p>安卓设备建议参考WeTest方案中的方法对设备进行锁频</p><p>iOS暂无锁频方案，测试时将风扇准备上</p><h3 id="Wetest方案"><a href="#Wetest方案" class="headerlink" title="Wetest方案"></a>Wetest方案</h3><p>移除设备电池，通过单片机供电并统计传输供电数据</p><p>优点：更准确</p><p>缺点：需要移除手机电池</p><blockquote><p>已知问题：<br>某些高通SoC，尤其是888，发热严重的，达到一定的温度阈值会触发SoC温控驱动自我保护机制，强制将频率控制在最低，导致我们的锁频功能失效。<br>解决方案是避免使用888这种发热严重的SoC，可以选用870等，也可以参考网上“删除android温控驱动”教程，删除驱动有极大风险，操作需谨慎。</p></blockquote><h2 id="软件方案"><a href="#软件方案" class="headerlink" title="软件方案"></a>软件方案</h2><p>Perfdog支持基于驱动上报的功耗数据获取</p><p>使用方便，准确度比硬件方案低</p><p>iOS直接解析了XCode Energy的数据</p><h2 id="Best-Practice-3"><a href="#Best-Practice-3" class="headerlink" title="Best Practice"></a>Best Practice</h2><p>统计优化前后的帧功耗：AvgPower = 平均功耗 mW/s</p><p>减少运算量：最好的优化就是离线化，GPU带宽压缩（ASTC、AFBC）等</p><h3 id="案例一：预计算遮挡剔除-PVS"><a href="#案例一：预计算遮挡剔除-PVS" class="headerlink" title="案例一：预计算遮挡剔除 PVS"></a>案例一：预计算遮挡剔除 PVS</h3><p>根据可达路径自动均匀铺设 PVS Cell</p><p>去除将需要每帧实时计算的遮挡剔除（OC）流程</p><p>降低 CPU 功耗</p><p><a href="https://docs.unrealengine.com/4.27/en-US/RenderingAndGraphics/VisibilityCulling/PrecomputedVisibilityVolume/">https://docs.unrealengine.com/4.27/en-US/RenderingAndGraphics/VisibilityCulling/PrecomputedVisibilityVolume/</a></p><h3 id="案例二：Framepacing"><a href="#案例二：Framepacing" class="headerlink" title="案例二：Framepacing"></a>案例二：Framepacing</h3><p>在游戏图像展示在显示屏的过程中</p><p>有一个比较影响用户体验的同步过程：</p><p>游戏逻辑和渲染循环 与 安卓系统和显示屏硬件之间有一个同步的关系</p><p>这个同步过程我们称为帧节奏（<strong>Frame Pacing</strong>）</p><p>即引擎与CPU、GPU配合产生图像的帧率 与 显示屏刷新率之间的同步关系</p><p>安卓的显示系统可避免<strong>画面撕裂</strong>（ScreenTearing）的问题</p><p>即当显示器正在刷新数据时，新的数据被Push到显示设备时的情况</p><p>其通过以下措施避免撕裂（Tearing）：</p><ul><li><p>将历史帧数据缓存住  </p></li><li><p>自动检测有延迟的帧数据提交  </p></li><li><p>当提交有延迟时，重复渲染历史帧数据</p></li></ul><p>通过Buffer缓存帧数据，当显示器刷新时，如果有新数据传输，直接将其缓存即可</p><p>如此设计，就不会有VSYNC的阻塞式等待的问题，不增大影响游戏逻辑的输入延迟</p><p>虽然带来了一定的画面延迟，但可以避免画面撕裂问题</p><p>见[移动游戏能耗发热分析与优化]P150</p><p>[什么？FPS不是越高越好吗]</p><h1 id="包体"><a href="#包体" class="headerlink" title="包体"></a>包体</h1><p>包体的大小、首包资源的大小对于玩家有较大影响</p><p>尽可能减少包体大小，也是开发者需要关注的重点问题</p><h2 id="SizeMap"><a href="#SizeMap" class="headerlink" title="SizeMap"></a>SizeMap</h2><p><a href="https://docs.unrealengine.com/en-US/Engine/Basics/AssetsAndPackages/AssetManagement/CookingAndChunking/index.html#sizemap">https://docs.unrealengine.com/en-US/Engine/Basics/AssetsAndPackages/AssetManagement/CookingAndChunking/index.html#sizemap</a></p><p>打开后点击AddChunks，将本地的pak包加载进窗口：</p><p>即可打开此pak的SizeMap窗口，可以看到SizeMap以TreeMap图的形式将资源分类，我们可以点击任意分类进入更深的层级来分析数据：</p><h2 id="Unreal-PakViewer"><a href="#Unreal-PakViewer" class="headerlink" title="Unreal PakViewer"></a>Unreal PakViewer</h2><p><a href="https://github.com/jashking/UnrealPakViewer">https://github.com/jashking/UnrealPakViewer</a></p><h2 id="Custom-Built-Profiler-With-CI"><a href="#Custom-Built-Profiler-With-CI" class="headerlink" title="Custom Built Profiler With CI"></a>Custom Built Profiler With CI</h2><p>Asset Registry 中包含资源的 Meta 信息（AssetRegistrySearchable）</p><p>可在Cook &amp; Package 结束后使用 Commandlet 分析此信息</p><p>得出进包资产的压缩数据，输出CI报告监控包体</p><h2 id="Best-Practice-4"><a href="#Best-Practice-4" class="headerlink" title="Best Practice"></a>Best Practice</h2><p>冗余资源不进包，贴图压缩（ASTC、ETC2）、充分利用 ASTC 8x8</p><p>ZSTD压缩、Oodle压缩，数据 <a href="https://en.wikipedia.org/wiki/Rate%E2%80%93distortion_optimization">RDO</a> 压缩</p><h3 id="案例一：GLSL、SPIRV-Shader数据压缩"><a href="#案例一：GLSL、SPIRV-Shader数据压缩" class="headerlink" title="案例一：GLSL、SPIRV Shader数据压缩"></a>案例一：GLSL、SPIRV Shader数据压缩</h3><p>GLSL可通过 ZSTD+字典 的形式做到极致的包体压缩</p><p>[基于ZSTD字典的Shader压缩方案]</p><p>Vulkan SPIRV可使用 <a href="https://github.com/aras-p/smol-v">SMOL-V</a> 进行 RDO 优化，从而达到极致的包体压缩</p><h1 id="代码崩溃-amp-稳定性"><a href="#代码崩溃-amp-稳定性" class="headerlink" title="代码崩溃 &amp; 稳定性"></a>代码崩溃 &amp; 稳定性</h1><p>疑难崩溃通常发生于非第一现场，需要花费大量<strong>人力</strong>和<strong>精力</strong>和<strong>心情</strong>❤去分析</p><p>是性价比最低的开发工作之一 😢</p><p>除了提升代码质量之外，如何提前发现可能的疑难崩溃，将其尽可能早的暴漏出来</p><p>是大型项目开发过程中需要考虑与解决的重点问题之一</p><p>Tips：可通过addr2line翻译崩溃符号至具体代码行号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># android-ndk-r21d\toolchains\aarch64-linux-android-4.9\prebuilt\windows-x86_64\bin\aarch64-linux-android-addr2line.exe</span></span><br><span class="line">addr2line.exe -f -C -e path/to/libUE4.so 0x009988ff</span><br></pre></td></tr></table></figure><h2 id="Address-Santizer"><a href="#Address-Santizer" class="headerlink" title="Address Santizer"></a>Address Santizer</h2><p>Android、iOS平台原生支持 ASan，UE也已整合至引擎中</p><p>日常通过冒烟测试ASan包，提前发现内存越界、Use-after-free等常见内存问题</p><p>将不属于你的崩溃，提前拒之门外，降低开发负担</p><p>[安卓平台使用ASan检查UE4内存问题]</p><h2 id="StompAllocator"><a href="#StompAllocator" class="headerlink" title="StompAllocator"></a>StompAllocator</h2><p>Windows平台也支持ASan，不行的是至少4.27版本的引擎仍旧无法正常使用ASan功能</p><p>可使用替代品，UE内部的 Stomp Allocator（会占用巨量虚拟内存（60G+））</p><p><a href="https://pzurita.wordpress.com/2015/06/29/memory-stomp-allocator-for-unreal-engine-4/">https://pzurita.wordpress.com/2015/06/29/memory-stomp-allocator-for-unreal-engine-4/</a></p><p>通过Page可以设置Read、Write保护的特性，在每次申请内存时，使用Page读写保护来保护内存区域</p><p>当越界读写时，就会触发保护，从而崩溃在问题出现的第一现场</p><h3 id="案例一：StompAllocator崩溃分析"><a href="#案例一：StompAllocator崩溃分析" class="headerlink" title="案例一：StompAllocator崩溃分析"></a>案例一：StompAllocator崩溃分析</h3><p>打开Stomp Allocator崩溃于第一现场</p><p>基类获取了Hits数组的地址</p><p>当其所在vector容器扩容时，会产生realloc，导致基类中的指向Hits的地址失效</p><p>正常情况下，realloc，老地址回Malloc池，如果这块内存仍未立即被使用，这块代码仍可正常执行</p><p>当这块老代码被其他模块使用，而Hits数据再次被修改时，就会出错</p><p>解决方法：</p><p>这种指向自己成员内存地址的对象，放在vector、TArray容器里再resize后都会有风险</p><p>临时修的话加个resize0，或者resize后assign(size, T())</p><p><strong>最好避免这种写法</strong></p><h2 id="Vulkan"><a href="#Vulkan" class="headerlink" title="Vulkan"></a>Vulkan</h2><p>Vulkan RHI在较新的移动设备中已全面支持</p><p>其RHI性能、驱动内存占用，可玩性、以及可优化性 远超 OpenGL RHI</p><h3 id="Vulkan-Validation"><a href="#Vulkan-Validation" class="headerlink" title="Vulkan Validation"></a>Vulkan Validation</h3><blockquote><p>Device Lost崩溃时绝望有多少、这张图就有多大</p></blockquote><p>想要避免Device Lost问题？首先要确保项目中已清空 Validation Error</p><p>[在UE4中吃好Vulkan的螃蟹-vulkan-validation-layer]</p><p>Validation Layer是Debug Vulkan RHI行为的必备工具</p><p>在UE4中以Log的形式报告出RHI层的错误用法以及潜在的性能问题：</p><h3 id="Vulkan-Command-Replay"><a href="#Vulkan-Command-Replay" class="headerlink" title="Vulkan Command Replay"></a>Vulkan Command Replay</h3><blockquote><p>优先选择寻找崩溃设备的厂商进行支持</p></blockquote><p>Vulkan 作为新兴 RHI，有一系列辅助开发的工具，其中就包含Command的Trace工具</p><p><a href="https://github.com/LunarG/gfxreconstruct">https://github.com/LunarG/gfxreconstruct</a></p><p>发现崩溃问题时，可通过Trace工具记录完整Command数据</p><p>通过二分回放定位问题Command</p><p>回放功能兼容UE4、5的重点在于处理好进程的信号处理接口</p><p>因为其数据采集部分功能基于此接口实现</p><p><a href="https://github.com/LunarG/gfxreconstruct/issues/990">https://github.com/LunarG/gfxreconstruct/issues/990</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/Profile/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E5%90%91/"/>
      <url>/2025/01/04/Unreal%20Engine/Profile/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="引擎优化"><a href="#引擎优化" class="headerlink" title="引擎优化"></a>引擎优化</h1><ol><li>引擎渲染管线简化</li><li>引擎mipmap优化</li><li>UI渲染管线分离</li><li>Shader异步编译</li><li>引擎动画URO优化</li><li>引擎线程数量和堆栈优化</li><li>IL2CPP元数据延迟装载优化</li><li>粒子相机外逻辑分帧优化</li><li>粒子面片CutOut优化</li><li>阴影缓存优化</li></ol><h1 id="业务优化"><a href="#业务优化" class="headerlink" title="业务优化"></a>业务优化</h1><ol><li>特效动态裁剪优化</li><li>战斗动态降档优化</li><li>资源LOD优化</li><li>UI图集LOD优化</li><li>迷雾刷新分屏优化</li><li>相机内外特效优化</li><li>TMP飘字渲染优化</li><li>团战音效裁剪优化</li><li>逻辑分帧优化</li><li>血条合批优化</li></ol><h1 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h1><ol><li>厂商绑核不降频优化</li><li>厂商CPU超频适配优化</li></ol><h1 id="优化类别"><a href="#优化类别" class="headerlink" title="优化类别"></a>优化类别</h1><ol><li>资产</li></ol><ul><li>LOD（网格、纹理、特效、骨骼）</li><li>资产剥离</li></ul><ol><li>阴影</li></ol><ul><li>实时阴影缓存（局部更新）</li><li>投影阴影</li><li>静态烘培阴影</li></ul><ol><li>线程</li></ol><ul><li>双队列切换</li><li>环形Buff无锁</li><li>无锁容器</li><li>读写锁</li><li>减少临界区</li><li>调整线程间卡点时间</li><li>独立计算部分拆分成线程</li><li>绑核</li><li>减少引擎逻辑线程栈内存大小</li><li>根据设备限制job线程数量</li></ul><ol><li>网络</li></ol><ul><li>冗余发送</li><li>调整窗口大小</li><li>数据包切割</li><li>发包缓存筛选提高效率</li><li>弱网预表现</li></ul><ol><li>UI</li></ol><ul><li>关闭IMGUI</li><li>定制层级</li><li>图集拆分</li><li>图集LOD</li><li>预制体LOD</li><li>动静分离</li><li>遮罩替换</li><li>节点复用</li><li>镂空绘制减少OverDraw</li><li>反转变色复用</li><li>降低UI相机分辨率</li><li>用RT减少重复绘制</li><li>低端机UI裁剪（特效、功能、描边）</li><li>UI管线定制</li><li>小地图3DUI</li></ul><ol><li>2D动画</li></ol><ul><li>序列帧动画合批</li><li>Live2D替换骨骼动画</li><li>粒子转帧动画</li></ul><ol><li>IL2CPP</li></ol><ul><li>去除IL2CPP黑名单缓存</li><li>降低内存释放门槛</li><li>按需加载元数据</li><li>业务泛型代码裁剪优化</li><li>IL2CPP空对象和数组越界检查的优化</li><li>RTTI的数据冗余</li><li>减少反射调用</li><li>更换容器（更换为sprase_hash_map、bytell_hash_map）</li><li>去掉NativeSymbol调用容器</li></ul><ol><li>渲染</li></ol><ul><li>Mipmap简化</li><li>渲染管线分离 UI、Main管线分离</li><li>渲染管线线程化</li><li>减少CommandBuffer缓存大小</li><li>简化低端机渲染管线</li><li>SRP脏标记</li></ul><ol><li>Shader</li></ol><ul><li>规范精简</li><li>精度变量优化</li><li>计算转移</li><li>离线计算结果存入纹理</li><li>预热</li><li>异步编译</li></ul><ol><li>动画</li></ol><ul><li>动画Job多线程</li><li>GPU Instance skin</li><li>动画分帧</li><li>顶点动画</li><li>Clip轨道简化</li><li>静态模型帧动画</li><li>弹簧骨骼代替Cloth飘带</li><li>冗余帧剔除（冗余关键帧、隔帧、插值、低精度、ACL压缩）</li></ul><ol><li>音效</li></ol><ul><li>音频资源LOD</li><li>团战实时音效裁剪（按范围和类型裁剪）</li></ul><ol><li>战斗</li></ol><ul><li>资产LOD（静态和动态）</li><li>渲染剔除算法（距离剔除、遮挡剔除、九宫格场景管理）</li><li>多物体渲染GPU Instance</li><li>动态分辨率</li><li>资源实例化预加载</li><li>裁剪（非主角裁剪）</li><li>非关键特效裁剪</li><li>相机外裁剪</li><li>相同特效裁剪</li><li>特效动态降档</li><li>团战屏蔽GC和资源卸载</li><li>内存错峰加载和卸载</li><li>Loding提前预加载和预解析计算</li></ul><ol><li>模型</li></ol><ul><li>模型改广告牌</li><li>静态模型离线合批</li><li>自定义网格动态合批</li></ul><ol><li>粒子</li></ol><ul><li>粒子Cutout</li><li>粒子拖尾改逻辑拖尾</li><li>粒子转Mesh后LOD</li><li>粒子转帧动画</li><li>粒子逻辑分帧</li></ul><ol><li>血条飘字</li></ol><ul><li>裁剪（非主角）</li><li>GPU Instance合批</li><li>逻辑动画替换动画</li><li>动态字体改静态</li><li>模型面片替换UGUI</li></ul><ol><li>业务逻辑</li></ol><ul><li>预加载</li><li>分帧</li><li>Dirty机制</li><li>事件机制</li><li>缓存</li><li>对象池</li><li>离线预计算生成表格</li><li>统一Update</li><li>预扩容</li><li>字符串内存自定义管理</li><li>数据合并 指针偏移</li></ul><ol><li>地图与寻路</li></ol><ul><li>SDF距离场</li><li>离线预计算导航点</li><li>权重导航</li><li>跳点寻路</li><li>跳点缓存</li></ul><ol><li>第三方SDK</li></ol><ul><li>战斗内关闭无关SDK</li><li>减少SDK线程池预存数量</li></ul><ol><li>厂商策略</li></ol><ul><li>掉核策略</li><li>CPU和发热数据驱动性能适配功能</li><li>超频策略</li></ul><ol><li>编译优化</li></ol><ul><li>-fomit-frame-pointer使用fp寄存器</li><li>-o1、-o2、-o3优化力度</li><li>__builtin_unreachable主动告知不会命中</li></ul><h1 id="性能工具"><a href="#性能工具" class="headerlink" title="性能工具"></a>性能工具</h1><ol><li>SimplePerf</li><li>内存问题</li></ol><ul><li>快照</li><li>插桩</li><li>注入</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/Platform/Java%20Native%20Interface/"/>
      <url>/2025/01/04/Unreal%20Engine/Platform/Java%20Native%20Interface/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/Platform/Unreal%20Plugin%20Language/"/>
      <url>/2025/01/04/Unreal%20Engine/Platform/Unreal%20Plugin%20Language/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/Physics/Empty/"/>
      <url>/2025/01/04/Unreal%20Engine/Physics/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/GamePlay/Replication/Replication%20Graph/"/>
      <url>/2025/01/04/Unreal%20Engine/GamePlay/Replication/Replication%20Graph/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/GamePlay/Replication/Significance%20Manager/"/>
      <url>/2025/01/04/Unreal%20Engine/GamePlay/Replication/Significance%20Manager/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/GamePlay/Game%20Ability%20System/UGameplayAbility/"/>
      <url>/2025/01/04/Unreal%20Engine/GamePlay/Game%20Ability%20System/UGameplayAbility/</url>
      
        <content type="html"><![CDATA[<p>一种游戏操作，可以赋予支持GAS的Actor并由其执行，附带用于确定其需求、开销和其他行为的信息。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/GamePlay/Game%20Ability%20System/UGameplayEffect/"/>
      <url>/2025/01/04/Unreal%20Engine/GamePlay/Game%20Ability%20System/UGameplayEffect/</url>
      
        <content type="html"><![CDATA[<p>游戏操作的效果。效果可以临时或永久修改属性、赋予或取销标签、启用对其他技能的访问等等。<br>Gameplay效果是支持GAS的Actor相互交互的最常见方式。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/GamePlay/Game%20Ability%20System/UAbilityTask/"/>
      <url>/2025/01/04/Unreal%20Engine/GamePlay/Game%20Ability%20System/UAbilityTask/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/GamePlay/Game%20Ability%20System/UAttributeSet/"/>
      <url>/2025/01/04/Unreal%20Engine/GamePlay/Game%20Ability%20System/UAttributeSet/</url>
      
        <content type="html"><![CDATA[<p>在游戏机制中具有特定含义的一系列属性或数值。<br>属性可以代表游戏资源，例如”生命值（Health）”、可以影响其他游戏规则的参考值，例如”基础攻击力（Base Attack Power）”，甚至可以代表无状态量，例如”施加的伤害（Applied Damage）”。<br>属性集（Attribute Sets）负责定义、管理、复制一个或多个属性（Attribute）的属性值。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/GamePlay/Game%20Ability%20System/UAbilitySystemComponent/"/>
      <url>/2025/01/04/Unreal%20Engine/GamePlay/Game%20Ability%20System/UAbilitySystemComponent/</url>
      
        <content type="html"><![CDATA[<p>一种 <strong>技能系统组件</strong> （ <strong>ASC</strong> ），可以添加到Actor，以便为其提供GAS功能。<br>这会跟踪特定Actor的状态，并处理复制。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/GamePlay/Game%20Ability%20System/AGameplayCueNotify_Actor/"/>
      <url>/2025/01/04/Unreal%20Engine/GamePlay/Game%20Ability%20System/AGameplayCueNotify_Actor/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/GamePlay/Game%20Ability%20System/FGameplayTag/"/>
      <url>/2025/01/04/Unreal%20Engine/GamePlay/Game%20Ability%20System/FGameplayTag/</url>
      
        <content type="html"><![CDATA[<p>可以应用于游戏对象的任意层级标识符。<br>这些标签可用于识别、分类、筛选游戏实体。<br>它们可以通过Gameplay效果和技能来赋予或取消，并且可以影响其行为。比如 <code>Gameplay.DamageImmunity</code> 标签，它可以防止对所有者的头像/Pawn造成伤害。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/GamePlay/Framwork/AGameStateBase/"/>
      <url>/2025/01/04/Unreal%20Engine/GamePlay/Framwork/AGameStateBase/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/GamePlay/Framwork/AGameModeBase/"/>
      <url>/2025/01/04/Unreal%20Engine/GamePlay/Framwork/AGameModeBase/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/Editor%20Extension/Empty/"/>
      <url>/2025/01/04/Unreal%20Engine/Editor%20Extension/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/Core/UObject/"/>
      <url>/2025/01/04/Unreal%20Engine/Core/UObject/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/Debug/Empty/"/>
      <url>/2025/01/04/Unreal%20Engine/Debug/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/Asset&amp;Pak&amp;Patch/Empty/"/>
      <url>/2025/01/04/Unreal%20Engine/Asset&amp;Pak&amp;Patch/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/Animation/%E5%8A%A8%E7%94%BB%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
      <url>/2025/01/04/Unreal%20Engine/Animation/%E5%8A%A8%E7%94%BB%E7%8A%B6%E6%80%81%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/AI/NavMesh/Empty/"/>
      <url>/2025/01/04/Unreal%20Engine/AI/NavMesh/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/AI/EnvironmentQuery/Empty/"/>
      <url>/2025/01/04/Unreal%20Engine/AI/EnvironmentQuery/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Unreal%20Engine/AI/BehaviorTree/Empty/"/>
      <url>/2025/01/04/Unreal%20Engine/AI/BehaviorTree/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Resume/NoAvatar/resume/"/>
      <url>/2025/01/04/Resume/NoAvatar/resume/</url>
      
        <content type="html"><![CDATA[<!-- The (first) h1 will be used as the <title> of the HTML page --><h1 id="姜钧窦"><a href="#姜钧窦" class="headerlink" title="姜钧窦"></a>姜钧窦</h1><!-- The unordered list immediately after the h1 will be formatted on a singleline. It is intended to be used for contact details --><ul><li>游戏客户端开发</li><li>u201613094@alumni.hust.edu.cn</li><li>13368730923</li><li><a href="https://hustjjd.github.io/">个人主页</a></li><li>上海</li></ul><h2 id="专业技能"><a href="#专业技能" class="headerlink" title="专业技能"></a>专业技能</h2><!-- The paragraph after the h1 and ul and before the first h2 is optional. Itis intended to be used for a short summary. --><ul><li>Programming：C/C++ UnLua Python Rust(兴趣) TS(兴趣)</li><li>UnrealEngine：UMG、GamePlay、UBT、UTexture</li><li>常用工具：Rider VisualStudio VisualStudioCode AndroidStudio XCode GDB PerfDog UnrealInsights RenderDoc Git MarkDown</li><li>人工智能：计算机视觉、生成模型、强化学习</li><li>图形学：物理模拟、流体仿真、渲染</li></ul><h2 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h2><!-- You have to wrap the "left" and "right" half of these headings in spans byhand --><h3 id="游戏客户端开发-腾讯天美工作室-2023-03-至今"><a href="#游戏客户端开发-腾讯天美工作室-2023-03-至今" class="headerlink" title="游戏客户端开发, 腾讯天美工作室 2023.03 - 至今"></a><span>游戏客户端开发, 腾讯天美工作室</span> <span>2023.03 - 至今</span></h3><p><strong>元梦之星</strong></p><ul><li>负责UGC地图数据系统的搭建，包含文件序列化、保存加载、压缩及存储、加密、上传下载、发布审核、引擎工具等开发</li><li>负责图片数据管理、ASTC化的工具链开发及多端协同</li><li>负责UGC模块的功能开发，包含负责新手引导、拍照系统、UI元件、AIGC、预设、系统访问等功能，参与高级设置、编程、NPC、Gameplay等开发，负责四足生物、多阵营、多关卡、大乱斗玩法等预研</li><li>负责效能工具开发，包括Crash自动分配工具、地图数据解析工具、CI/CD等</li><li>参与UGC模块的内存泄漏、性能、安全、断线重连等专项问题处理</li><li>参与一致性物理引擎-数学物理模块开发<br>荣誉：<strong>2024 H1 OutStanding</strong></li></ul><h3 id="实习-腾讯天美工作室-2022-05-2022-08"><a href="#实习-腾讯天美工作室-2022-05-2022-08" class="headerlink" title="实习, 腾讯天美工作室 2022.05 - 2022.08"></a><span>实习, 腾讯天美工作室</span> <span>2022.05 - 2022.08</span></h3><p><strong>爆笑向前冲</strong></p><ul><li>负责强化学习AI的SDK接入与训练框架搭建</li><li>负责游戏状态设计与算法模型调优，初步验证强化学习AI在该品类中的可行性</li></ul><p><strong>超级QQ秀 - 王者周年庆</strong></p><ul><li>负责关卡Gameplay开发，为TD提供技术支持</li></ul><h3 id="C-开发-工程数值模拟基础算法与模型全国重点实验室-2020-10-2023-05"><a href="#C-开发-工程数值模拟基础算法与模型全国重点实验室-2020-10-2023-05" class="headerlink" title="C++开发, 工程数值模拟基础算法与模型全国重点实验室 2020.10 - 2023.05"></a><span>C++开发, 工程数值模拟基础算法与模型全国重点实验室</span> <span>2020.10 - 2023.05</span></h3><p><strong>龙驰通用网格生成软件</strong></p><ul><li>项目初始成员，主要负责结构网格、非结构网格的生成与质量检测算法开发</li><li>负责Perl、Scheme逻辑层和Fortran、C算法库的解析，基于QT、Python进行重构和二次开发</li><li>负责HPC集群Slurm、Docker的搭建和使用培训</li><li>参与软件架构、几何参数化的研究<br>成果：龙驰通用网格生成软件获“2024优秀自主工业仿真软件”荣誉称号</li></ul><h2 id="教育经历"><a href="#教育经历" class="headerlink" title="教育经历"></a>教育经历</h2><h3 id="四川大学-计算机技术-硕士-2020-09-2023-06"><a href="#四川大学-计算机技术-硕士-2020-09-2023-06" class="headerlink" title="四川大学, 计算机技术, 硕士 2020.09 - 2023.06"></a><span><strong>四川大学</strong>, 计算机技术, 硕士</span> <span>2020.09 - 2023.06</span></h3><ul><li>GPA: 3.4 / 4.0.</li><li>工程数值模拟基础算法与模型全国重点实验室 导师：邓小刚 院士</li><li>荣誉/奖项：参与XXXX-X国家重大工程项目、优秀学生干部、二等奖学金</li><li>研究方向：深度神经网络在计算流体力学与网格划分中的应用，商用CAE工业软件的设计与开发</li></ul><h3 id="华中科技大学-生物药学-本科-2016-08-2020-06"><a href="#华中科技大学-生物药学-本科-2016-08-2020-06" class="headerlink" title="华中科技大学, 生物药学, 本科 2016.08 - 2020.06"></a><span><strong>华中科技大学</strong>, 生物药学, 本科</span> <span>2016.08 - 2020.06</span></h3><ul><li>荣誉/奖项：院学生会主席（2019）、优秀毕业生代表(招生宣传手册)、校学生代表、优秀学生干部、优秀共青团员、文体奖学金（2019）、公益奖学金（2017-2018）</li><li>研究经历：复杂食品样品中的雌激素含量分析研究，基于分子对接的獐牙菜属植物药用价值研究</li></ul><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><ul><li>Jundou Jiang, Guanxiong Li, Yi Jiang, Laiping Zhang, Xiaogang Deng, TransCFD: A transformer-based decoder for flow field prediction, EAAI, Volume 123, Part B, 2023, 106340, ISSN 0952-1976, <a href="https://doi.org/10.1016/j.engappai.2023.106340">https://doi.org/10.1016/j.engappai.2023.106340</a>. JCR Q1, IF7.5, 被引18.</li><li>姜钧窦,姜屹,陈亮中,等.基于Transformer解码器网络的翼型流场预测方法. CN202211469160.1 [2024-11-22]. 主要完成人,已授权.</li><li>姜钧窦,朱一秦,杨越.虚拟关卡的颜色变更方法、装置、设备及存储介质.202311083008.4.主要完成人,审查中.</li><li>杨越,姜钧窦,刘思博.图像生成方法、装置、设备及存储介质.202311109510.8.主要完成人,审查中.</li></ul><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><ul><li>技能：Ansys ICEM、Fluent、PointWise等流体仿真软件，Adobe音视频软件，Office</li><li>证书/执照：计算机四级（网络）、英语（CET-6）、高中物理教师资格证</li><li>兴趣爱好：骑行、摄影、篮球</li><li>自评：做事踏实认真负责，执行能力强，有owner意识，具备快速学习能力，新技术上手速度快</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/01/04/Resume/CN/"/>
      <url>/2025/01/04/Resume/CN/</url>
      
        <content type="html"><![CDATA[<center>    <div>        <img src="resoure/avatar.jpg" style="float:right" width="68" height="80"/>        <span style="font-family:Georgia;font-size:18px;color:#262626;font-weight:bold">姜钧窦</span>        <br>        <span style="font-size:13px;">&#x1F3D8;</span> <span style="font-family:Open Sans;font-size:13px;color:#595959;">上海 | </span>        <span style="font-size:13px;">&#x1F4DE;</span> <span style="font-family:Open Sans;font-size:13px;color:#595959;">13368730923 | 25岁 | 男 </span>        <br>        <span style="font-size:13px;">&#x1F4E7;</span> <a href="mailto:u201613094@alumni.hust.edu.cn", style="font-family:Open Sans;font-size:13px;">u201613094@alumni.hust.edu.cn</a>        </font><img src="resoure/github.jpg" width="13px"> <a href="https://github.com/HUSTJJD", style="font-family:Open Sans;font-size:13px;">HUSTJJD</a>        <span style="font-size:13px">&#x1F5A5;</span> <a href="https://hustjjd.github.io/", style="font-family:Open Sans;font-size:13px;">Blog</a>    </div></center><h3 id="Skill"><a href="#Skill" class="headerlink" title=" Skill "></a><span style="font-family:Georgia;font-size:14px;color:#262626"> <strong>Skill</strong> </span></h3><ul><li><span style="font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;">Programming: </span> <strong>C/C++ | Lua | Python</strong>  INTEREST( Rust | TS )</li><li><span style="font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;">Unreal Engine: </span> UMG | Gameplay | Unlua</li><li><span style="font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;">Tools: </span> Rider | VisualStudio | VisualStudioCode | AndroidStudio | XCode | GDB | PerfDog | UnrealInsights | RenderDoc | Houdini | CMake | Git | MarkDown</li><li><span style="font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;">Graphics: </span> Fluid Simulation | Animation | Rendering</li><li><span style="font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;">Machine Learning: </span> Computer Vision | Generative Model | Reinforcement Learning</li></ul><h3 id="Experience"><a href="#Experience" class="headerlink" title=" Experience "></a><span style="font-family:Georgia;font-size:14px;color:#262626"> <strong>Experience</strong> </span></h3><div style="display:flex;align-items:center;height:13px;margin-top:10px;"><span style="text-indent:10px;flex:0 0 230px;font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;"> 元梦之星 </span><span style="flex:0 0 100px;font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;"> 游戏客户端 T7 </span><span style="flex:1;font-size:13px;font-family:Open Sans;font-weight:bold;color:#595959;"> 腾讯天美 T1 Studio </span><span style="flex:0 0 110px;font-size:13px;font-family:Open Sans;color:#595959;float:right"> 2023.03 - </span></div><ul><li>负责UGC地图数据系统，包括序列化、保存加载、压缩及存储、加密、上传下载、发布审核、引擎工具等</li><li>负责云端文件管理、多端ASTC贴图的工具链开发</li><li>负责UGC模块的功能开发，主导新手引导、拍照系统、UI元件、AIGC、预设、相册访问等，参与高级设置、编程、NPC、Gameplay、UGC分大厅等，预研四足生物、多阵营、多关卡、大乱斗玩法等</li><li>负责效能工具开发，包括Crash自动分配工具、地图数据解析工具、CI/CD等</li><li>参与UGC模块的内存泄漏、性能、安全、断线重连等专项问题处理</li><li>参与一致性物理引擎-数学物理模块开发，参与开源组件trpc-cos开发</li><li>荣誉：<strong>2024 H1 OutStanding</strong></li></ul><div style="display:flex;align-items:center;height:13px;"><span style="text-indent:10px;flex:0 0 230px;font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;"> 爆笑向前冲 | 超级QQ秀-王者周年庆 </span><span style="flex:0 0 100px;font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;"> 实习 </span><span style="flex:1;font-size:13px;font-family:Open Sans;font-weight:bold;color:#595959;"> 腾讯天美 T1 Studio </span><span style="flex:0 0 110px;font-size:13px;font-family:Open Sans;color:#595959;float:right"> 2022.05 - 2022.08 </span></div><ul><li>负责强化学习AI的SDK接入与训练框架搭建</li><li>负责游戏状态设计与算法模型调优，验证强化学习AI在该品类中的可行性</li><li>负责关卡Gameplay开发，为TD提供技术支持</li></ul><div style="display:flex;align-items:center;height:13px;"><span style="text-indent:10px;flex:0 0 230px;font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;"> 龙驰通用网格生成软件 </span><span style="flex:0 0 100px;font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;"> C++开发 </span><span style="flex:1;font-size:13px;font-family:Open Sans;font-weight:bold;color:#595959;"> 工程数值模拟国重点实验室 </span><span style="flex:0 0 110px;font-size:13px;font-family:Open Sans;color:#595959;float:right"> 2020.10 - 2023.05 </span></div><ul><li>项目初始成员，负责结构网格/非结构网格的生成、质量检测算法开发</li><li>参与基于QT/Python重构开发Tcl/TK界面及Perl/Scheme脚本，解析和封装Fortran/C/C++数据算法层，重构RPC框架</li><li>参与网格软件架构、CAD几何内核的研究</li><li>负责HPC集群Slurm、Docker的搭建和使用培训</li><li>成果：龙驰通用网格生成软件获“2024优秀自主工业仿真软件”荣誉称号</li></ul><h3 id="Education"><a href="#Education" class="headerlink" title=" Education "></a><span style="font-family:Georgia;font-size:14px;color:#262626"> <strong>Education</strong> </span></h3><div style="display:flex;align-items:center;height:13px;margin-top:10px;"><span style="text-indent:10px;flex:0 0 230px;font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;"> 计算机技术 </span><span style="flex:0 0 100px;font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;"> 硕士 </span><span style="flex:1;font-size:13px;font-family:Open Sans;font-weight:bold;color:#595959;"> 四川大学 </span><span style="flex:0 0 110px;font-size:13px;font-family:Open Sans;color:#595959;float:right"> 2020.09 - 2023.06 </span></div>- GPA: 3.4 / 4.0. 就读于 工程数值模拟基础算法与模型全国重点实验室 导师：邓小刚 院士- 荣誉/奖项：参与XXXX-X国家重大工程项目、优秀研究生干部、二等奖学金- 研究经历：深度神经网络在计算流体力学与网格划分中的应用，商用CAE工业软件的设计与开发<div style="display:flex;align-items:center;height:13px;"><span style="text-indent:10px;flex:0 0 230px;font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;"> 生物药学 </span><span style="flex:0 0 100px;font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;"> 本科 </span><span style="flex:1;font-size:13px;font-family:Open Sans;font-weight:bold;color:#595959;"> 华中科技大学 </span><span style="flex:0 0 110px;font-size:13px;font-family:Open Sans;color:#595959;float:right"> 2016.08 - 2020.06 </span></div><ul><li>荣誉/奖项：学生会主席（2019）、优秀毕业生代表、校学生代表、优秀学生干部、优秀共青团员、文体奖学金（2019）、公益奖学金（2017-2018）</li><li>研究经历：复杂食品样品中的雌激素含量分析研究，基于分子对接的獐牙菜属植物药用价值研究</li></ul><h3 id="Publications"><a href="#Publications" class="headerlink" title=" Publications "></a><span style="font-family:Georgia;font-size:14px;color:#262626"> <strong>Publications</strong> </span></h3><ul><li><span style="font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;">Jundou Jiang</span>,Guanxiong Li,Yi Jiang,Laiping Zhang,Xiaogang Deng,TransCFD: A transformer-based decoder for flow field prediction,EAAI,Volume 123,Part B,2023,106340,ISSN 0952-1976,<a href="https://doi.org/10.1016/j.engappai.2023.106340">https://doi.org/10.1016/j.engappai.2023.106340</a>. <strong>JCR Q1, IF 7.5, CI 18.</strong></li><li><span style="font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;">姜钧窦</span>,姜屹,陈亮中,等.基于Transformer解码器网络的翼型流场预测方法. CN202211469160.1 [2024-11-22]. 主要完成人,已授权.</li><li><span style="font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;">姜钧窦</span>,朱一秦,杨越.虚拟关卡的颜色变更方法、装置、设备及存储介质. 202311083008.4. 主要完成人,审查中.</li><li>杨越,<span style="font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;">姜钧窦</span>,刘思博.图像生成方法、装置、设备及存储介质. 202311109510.8. 主要完成人,审查中.</li></ul><h3 id="Misc"><a href="#Misc" class="headerlink" title=" Misc "></a><span style="font-family:Georgia;font-size:14px;color:#262626"> <strong>Misc</strong> </span></h3><ul><li><span style="font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;">技能：</span> Ansys ICEM、Fluent、PointWise等流体仿真软件，Adobe音视频软件，Office</li><li><span style="font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;">证书/执照：</span> 计算机四级（网络）、英语（CET-6）、教师资格证（高中物理）</li><li><span style="font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;">兴趣：</span> 骑行、摄影、篮球</li><li><span style="font-size:13px;font-family:Open Sans;font-weight:bold;color:#1d824c;">自评：</span> 做事踏实认真负责，执行能力强，有owner意识，具备快速学习能力</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/README/"/>
      <url>/2025/01/04/README/</url>
      
        <content type="html"><![CDATA[<p><strong>Push 前先运行 <code>python3 Formatter.py</code></strong> [[Formatter.py]]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Z%20Reference%20Link/"/>
      <url>/2025/01/04/Programing/Z%20Reference%20Link/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h1 id="C-amp-C"><a href="#C-amp-C" class="headerlink" title="C&amp;C++"></a>C&amp;C++</h1><p>C++ 参考手册 <a href="https://c-cpp.com/cpp">https://c-cpp.com/cpp</a></p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h1 id="Cuda"><a href="#Cuda" class="headerlink" title="Cuda"></a>Cuda</h1><h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>Rust 程序设计语言 <a href="https://rustwiki.org/zh-CN/book/title-page.html">https://rustwiki.org/zh-CN/book/title-page.html</a></p><h1 id="Design-Pattern"><a href="#Design-Pattern" class="headerlink" title="Design Pattern"></a>Design Pattern</h1><p>设计模式 <a href="https://refactoringguru.cn/design-patterns">https://refactoringguru.cn/design-patterns</a></p><h2 id="Creational"><a href="#Creational" class="headerlink" title="Creational"></a>Creational</h2><h2 id="Behavioral"><a href="#Behavioral" class="headerlink" title="Behavioral"></a>Behavioral</h2><h2 id="Structural"><a href="#Structural" class="headerlink" title="Structural"></a>Structural</h2><h1 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h1><h1 id="Code-Style"><a href="#Code-Style" class="headerlink" title="Code Style"></a>Code Style</h1><p>Google 开源项目风格指南  <a href="https://zh-google-styleguide.readthedocs.io/en/latest/index.html">https://zh-google-styleguide.readthedocs.io/en/latest/index.html</a></p><h1 id="TypeScript-1"><a href="#TypeScript-1" class="headerlink" title="TypeScript"></a>TypeScript</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/TypeScript/1%20Overview/"/>
      <url>/2025/01/04/Programing/TypeScript/1%20Overview/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Shell/1%20Overview/"/>
      <url>/2025/01/04/Programing/Shell/1%20Overview/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Rust/1%20%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/01/04/Programing/Rust/1%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Python/1%20Overview/"/>
      <url>/2025/01/04/Programing/Python/1%20Overview/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Lua/5%20Lua%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2025/01/04/Programing/Lua/5%20Lua%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> recursionsetmetatable</span><br><span class="line">recursionsetmetatable = <span class="function"><span class="keyword">function</span><span class="params">(t, index)</span></span></span><br><span class="line">    <span class="keyword">local</span> mt = <span class="built_in">getmetatable</span>(t)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> mt <span class="keyword">then</span> mt = &#123;&#125; <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> mt.<span class="built_in">__index</span> <span class="keyword">then</span></span><br><span class="line">        mt.<span class="built_in">__index</span> = index</span><br><span class="line">        mt.<span class="built_in">__gc</span> = <span class="function"><span class="keyword">function</span><span class="params">(self)</span></span> <span class="built_in">self</span>:Dtor() <span class="keyword">end</span></span><br><span class="line">        <span class="built_in">setmetatable</span>(t, mt)</span><br><span class="line">    <span class="keyword">elseif</span> mt.<span class="built_in">__index</span> ~= index <span class="keyword">then</span></span><br><span class="line">        recursionsetmetatable(mt, index)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">Class</span><span class="params">(clsName, ...)</span></span></span><br><span class="line">    <span class="keyword">local</span> cls = &#123; __cname = clsName &#125;</span><br><span class="line">    <span class="keyword">local</span> supers = &#123; ... &#125;</span><br><span class="line">    <span class="comment">-- super 可以是table 可以是function</span></span><br><span class="line">    <span class="keyword">for</span> _, super <span class="keyword">in</span> <span class="built_in">ipairs</span>(supers) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> superType = <span class="built_in">type</span>(super)</span><br><span class="line">        <span class="keyword">if</span> superType == <span class="string">&#x27;function&#x27;</span> <span class="keyword">then</span></span><br><span class="line">            cls.__create = super</span><br><span class="line">        <span class="keyword">elseif</span> superType == <span class="string">&#x27;table&#x27;</span> <span class="keyword">then</span></span><br><span class="line">            cls.__supers = cls.__supers <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">            cls.__supers[#cls.__supers + <span class="number">1</span>] = super</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    cls.<span class="built_in">__index</span> = cls</span><br><span class="line">    <span class="keyword">local</span> mt = &#123;</span><br><span class="line">        <span class="built_in">__call</span> = <span class="function"><span class="keyword">function</span><span class="params">(cls, ...)</span></span> <span class="keyword">return</span> cls.New(...) <span class="keyword">end</span>,</span><br><span class="line">        <span class="comment">-- __gc = function(cls) end</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> cls.__supers <span class="keyword">then</span></span><br><span class="line">        mt.<span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(_, key)</span></span></span><br><span class="line">            <span class="keyword">for</span> i, super <span class="keyword">in</span> <span class="built_in">ipairs</span>(cls.__supers) <span class="keyword">do</span></span><br><span class="line">                <span class="keyword">if</span> super[key] <span class="keyword">then</span> <span class="keyword">return</span> super[key] <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">setmetatable</span>(cls, mt)</span><br><span class="line">    <span class="comment">-- 必然是成员函数</span></span><br><span class="line">    cls.CallSuper = <span class="function"><span class="keyword">function</span><span class="params">(self, funcName, ...)</span></span></span><br><span class="line">        <span class="keyword">if</span> cls.__supers <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">for</span> _, super <span class="keyword">in</span> <span class="built_in">ipairs</span>(cls.__supers) <span class="keyword">do</span></span><br><span class="line">                <span class="keyword">local</span> superFunc = super[funcName]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span>(superFunc) == <span class="string">&#x27;function&#x27;</span> <span class="keyword">then</span></span><br><span class="line">                    superFunc(<span class="built_in">self</span>, ...)</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cls.Ctor <span class="keyword">then</span></span><br><span class="line">        cls.Ctor = <span class="function"><span class="keyword">function</span><span class="params">(self, ...)</span></span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cls.Dtor <span class="keyword">then</span></span><br><span class="line">        cls.Dtor = <span class="function"><span class="keyword">function</span><span class="params">(self, ...)</span></span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    cls.New = <span class="function"><span class="keyword">function</span><span class="params">(...)</span></span></span><br><span class="line">        <span class="keyword">local</span> <span class="built_in">self</span> = cls.__create <span class="keyword">and</span> cls.__create(...) <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">        recursionsetmetatable(<span class="built_in">self</span>, cls)</span><br><span class="line">        <span class="built_in">self</span>:Ctor(...)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">IsA</span><span class="params">(self, cls)</span></span></span><br><span class="line">    <span class="keyword">local</span> recursionIsA</span><br><span class="line">    recursionIsA = <span class="function"><span class="keyword">function</span><span class="params">(clsXX, clsB)</span></span></span><br><span class="line">        <span class="keyword">if</span> clsXX.__supers <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">for</span> _, super <span class="keyword">in</span> <span class="built_in">ipairs</span>(clsXX.__supers) <span class="keyword">do</span></span><br><span class="line">                <span class="keyword">if</span> recursionIsA(super, clsB) <span class="keyword">or</span> super.__cname == clsB.__cname <span class="keyword">then</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> recursionIsA(<span class="built_in">self</span>, cls) <span class="keyword">or</span> <span class="built_in">self</span>.__cname == cls.__cname</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">_G</span>.Class = Class</span><br><span class="line"><span class="built_in">_G</span>.IsA = IsA</span><br></pre></td></tr></table></figure><h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Test Code</span></span><br><span class="line"><span class="keyword">local</span> clsXX = <span class="built_in">_G</span>.Class(<span class="string">&#x27;clsXX&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clsXX:Ctor</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="built_in">self</span>.name = <span class="string">&#x27;objXX&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">self</span>.__cname, clsXX.__cname, <span class="string">&#x27;Ctor&#x27;</span>, ...)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clsXX:Print</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;clsXX Print&#x27;</span>, <span class="built_in">self</span>.name, ...)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clsXX:Dtor</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Dtor&#x27;</span>, <span class="built_in">self</span>.name, <span class="built_in">self</span>.__cname, clsXX.__cname)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> clsYY = <span class="built_in">_G</span>.Class(<span class="string">&#x27;clsYY&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clsYY:Ctor</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="built_in">self</span>.name = <span class="string">&#x27;objYY&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">self</span>.__cname, clsYY.__cname, <span class="string">&#x27;Ctor&#x27;</span>, ...)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clsYY:Print</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;clsYY Print&#x27;</span>, <span class="built_in">self</span>.name, ...)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clsYY:Dtor</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Dtor&#x27;</span>, <span class="built_in">self</span>.name, <span class="built_in">self</span>.__cname, clsYY.__cname)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> clsB = <span class="built_in">_G</span>.Class(<span class="string">&#x27;clsB&#x27;</span>, clsXX)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clsB:Ctor</span><span class="params">(...)</span></span></span><br><span class="line">    clsB.CallSuper(<span class="built_in">self</span>, <span class="string">&#x27;Ctor&#x27;</span>, ...)</span><br><span class="line">    <span class="built_in">self</span>.name = <span class="string">&#x27;objB&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clsB:Print</span><span class="params">(...)</span></span></span><br><span class="line">    clsB.CallSuper(<span class="built_in">self</span>, <span class="string">&#x27;Print&#x27;</span>, ...)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clsB:Dtor</span><span class="params">()</span></span></span><br><span class="line">    clsB.CallSuper(<span class="built_in">self</span>, <span class="string">&#x27;Dtor&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> clsC = <span class="built_in">_G</span>.Class(<span class="string">&#x27;clsC&#x27;</span>, clsB, clsYY)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clsC:Ctor</span><span class="params">(...)</span></span></span><br><span class="line">    clsC.CallSuper(<span class="built_in">self</span>, <span class="string">&#x27;Ctor&#x27;</span>, ...)</span><br><span class="line">    <span class="built_in">self</span>.name = <span class="string">&#x27;objC&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clsC:Print</span><span class="params">(...)</span></span></span><br><span class="line">    clsC.CallSuper(<span class="built_in">self</span>, <span class="string">&#x27;Print&#x27;</span>, ...)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clsC:Dtor</span><span class="params">()</span></span></span><br><span class="line">    clsC.CallSuper(<span class="built_in">self</span>, <span class="string">&#x27;Dtor&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> objXX = clsXX.New()</span><br><span class="line"><span class="keyword">local</span> objB = clsB(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">local</span> objC = clsC(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">objXX:Print()</span><br><span class="line">objB:Print()</span><br><span class="line">objC:Print()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;IsA(objB, clsB)&#x27;</span>, <span class="built_in">_G</span>.IsA(objB, clsB))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;IsA(objB, clsC)&#x27;</span>, <span class="built_in">_G</span>.IsA(objB, clsC))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;IsA(objC, clsXX)&#x27;</span>, <span class="built_in">_G</span>.IsA(objC, clsXX))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;IsA(objC, clsYY)&#x27;</span>, <span class="built_in">_G</span>.IsA(objC, clsYY))</span><br><span class="line"><span class="keyword">local</span> clsFunc = <span class="built_in">_G</span>.Class(<span class="string">&#x27;clsFunc&#x27;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"><span class="keyword">end</span>, clsB)</span><br><span class="line"><span class="keyword">local</span> objFunc = clsFunc()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Lua/3%20Lua%20GC/"/>
      <url>/2025/01/04/Programing/Lua/3%20Lua%20GC/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Lua/4%20Lua%20%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2025/01/04/Programing/Lua/4%20Lua%20%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Lua/2%20Lua%205.x%E7%B2%BE%E8%A6%81%E6%80%BB%E7%BB%93/"/>
      <url>/2025/01/04/Programing/Lua/2%20Lua%205.x%E7%B2%BE%E8%A6%81%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="5-0"><a href="#5-0" class="headerlink" title="5.0"></a>5.0</h1><h1 id="5-1"><a href="#5-1" class="headerlink" title="5.1"></a>5.1</h1><h1 id="5-2"><a href="#5-2" class="headerlink" title="5.2"></a>5.2</h1><h1 id="5-3"><a href="#5-3" class="headerlink" title="5.3"></a>5.3</h1><h1 id="5-4"><a href="#5-4" class="headerlink" title="5.4"></a>5.4</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Lua/1%20Overview/"/>
      <url>/2025/01/04/Programing/Lua/1%20Overview/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/9%20Template%20Method/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/9%20Template%20Method/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/7%20State/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/7%20State/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/8%20Strategy/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/8%20Strategy/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/4%20Mediator/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/4%20Mediator/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/6%20Observer/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/6%20Observer/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/5%20Memento/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/5%20Memento/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/3%20Iterator/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/3%20Iterator/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/2%20Command/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/2%20Command/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/10%20Visitor/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/10%20Visitor/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/11%20Summary/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/11%20Summary/</url>
      
        <content type="html"><![CDATA[<p>行为模式负责对象间的高效沟通和职责委派。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/1%20Chain%20of%20Responsibility/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/3%20Behavioral/1%20Chain%20of%20Responsibility/</url>
      
        <content type="html"><![CDATA[<h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>责任链模式</strong>是一种行为设计模式， 允许你将请求沿着处理者链进行发送。 收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>与许多其他行为设计模式一样， <strong>责任链</strong>会将特定行为转换为被称作<em>处理者</em>的独立对象。 在上述示例中， 每个检查步骤都可被抽取为仅有单个方法的类， 并执行检查操作。 请求及其数据则会被作为参数传递给该方法。</p><p>模式建议你将这些处理者连成一条链。 链上的每个处理者都有一个成员变量来保存对于下一处理者的引用。 除了处理请求外， 处理者还负责沿着链传递请求。 请求会在链上移动， 直至所有处理者都有机会对其进行处理。</p><p>最重要的是： 处理者可以决定不再沿着链传递请求， 这可高效地取消所有后续处理步骤。</p><p>所有处理者类均实现同一接口是关键所在。 每个具体处理者仅关心下一个包含 <code>execute</code>执行方法的处理者。 这样一来， 你就可以在运行时使用不同的处理者来创建链， 而无需将相关代码与处理者的具体类进行耦合。</p><h2 id="责任链模式适合应用场景"><a href="#责任链模式适合应用场景" class="headerlink" title="责任链模式适合应用场景"></a>责任链模式适合应用场景</h2><p> 当程序需要使用不同方式处理不同种类请求， 而且请求类型和顺序预先未知时， 可以使用责任链模式。</p><p> 该模式能将多个处理者连接成一条链。 接收到请求后， 它会 “询问” 每个处理者是否能够对其进行处理。 这样所有处理者都有机会来处理请求。</p><p> 当必须按顺序执行多个处理者时， 可以使用该模式。</p><p> 无论你以何种顺序将处理者连接成一条链， 所有请求都会严格按照顺序通过链上的处理者。</p><p> 如果所需处理者及其顺序必须在运行时进行改变， 可以使用责任链模式。</p><p> 如果在处理者类中有对引用成员变量的设定方法， 你将能动态地插入和移除处理者， 或者改变其顺序。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li>声明处理者接口并描述请求处理方法的签名。<br> 确定客户端如何将请求数据传递给方法。 最灵活的方式是将请求转换为对象， 然后将其以参数的形式传递给处理函数。</li><li>为了在具体处理者中消除重复的样本代码， 你可以根据处理者接口创建抽象处理者基类。<br> 该类需要有一个成员变量来存储指向链上下个处理者的引用。 你可以将其设置为不可变类。 但如果你打算在运行时对链进行改变， 则需要定义一个设定方法来修改引用成员变量的值。<br> 为了使用方便， 你还可以实现处理方法的默认行为。 如果还有剩余对象， 该方法会将请求传递给下个对象。 具体处理者还能够通过调用父对象的方法来使用这一行为。</li><li>依次创建具体处理者子类并实现其处理方法。 每个处理者在接收到请求后都必须做出两个决定：<ul><li>是否自行处理这个请求。</li><li>是否将该请求沿着链进行传递。</li></ul></li><li>客户端可以自行组装链， 或者从其他对象处获得预先组装好的链。 在后一种情况下， 你必须实现工厂类以根据配置或环境设置来创建链。</li><li>客户端可以触发链中的任意处理者， 而不仅仅是第一个。 请求将通过链进行传递， 直至某个处理者拒绝继续传递， 或者请求到达链尾。</li><li>由于链的动态性， 客户端需要准备好处理以下情况：<ul><li>链中可能只有单个链接。</li><li>部分请求可能无法到达链尾。</li><li>其他请求可能直到链尾都未被处理。</li></ul></li></ol><h2 id="责任链模式优缺点"><a href="#责任链模式优缺点" class="headerlink" title="责任链模式优缺点"></a>责任链模式优缺点</h2><ul><li>你可以控制请求处理的顺序。</li><li><em>单一职责原则</em>。 你可对发起操作和执行操作的类进行解耦。</li><li><em>开闭原则</em>。 你可以在不更改现有代码的情况下在程序中新增处理者。</li><li>部分请求可能未被处理。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/2%20Structural/7%20Proxy/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/2%20Structural/7%20Proxy/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/2%20Structural/8%20Summary/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/2%20Structural/8%20Summary/</url>
      
        <content type="html"><![CDATA[<p>结构型模式介绍如何将对象和类组装成较大的结构，并同时保持结构的灵活和高效。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/2%20Structural/5%20Facade/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/2%20Structural/5%20Facade/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/2%20Structural/6%20Flyweight/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/2%20Structural/6%20Flyweight/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/2%20Structural/4%20Decorator/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/2%20Structural/4%20Decorator/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/2%20Structural/3%20Composite/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/2%20Structural/3%20Composite/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/2%20Structural/2%20Bridge/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/2%20Structural/2%20Bridge/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/2%20Structural/1%20Adapter/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/2%20Structural/1%20Adapter/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/1%20Creational/5%20Singleton/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/1%20Creational/5%20Singleton/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/1%20Creational/6%20Summary/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/1%20Creational/6%20Summary/</url>
      
        <content type="html"><![CDATA[<p>创建型模式提供了创建对象的机制，能够提升已有代码的灵活性和可复用性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/1%20Creational/3%20Builder/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/1%20Creational/3%20Builder/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/1%20Creational/4%20Prototype/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/1%20Creational/4%20Prototype/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/1%20Creational/2%20Abstract%20Factory/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/1%20Creational/2%20Abstract%20Factory/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Design%20Pattern/1%20Creational/1%20Factory%20Method%20%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/"/>
      <url>/2025/01/04/Programing/Design%20Pattern/1%20Creational/1%20Factory%20Method%20%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h1><p>在父类中提供一个创建对象的方法，允许子类决定实例化对象的类型。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Cuda/Empty/"/>
      <url>/2025/01/04/Programing/Cuda/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/Code%20Style/Empty/"/>
      <url>/2025/01/04/Programing/Code%20Style/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/C&amp;C++/%E5%B0%81%E8%A3%85%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E5%A4%9A%E6%80%81/"/>
      <url>/2025/01/04/Programing/C&amp;C++/%E5%B0%81%E8%A3%85%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/C&amp;C++/%E5%AE%9E%E7%8E%B0%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/"/>
      <url>/2025/01/04/Programing/C&amp;C++/%E5%AE%9E%E7%8E%B0%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ItemType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">    &#123;</span><br><span class="line">        Node* next;</span><br><span class="line">        ItemType data;</span><br><span class="line">        <span class="built_in">Node</span>() : <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">explicit</span> <span class="title">Node</span><span class="params">(<span class="type">const</span> ItemType&amp; item)</span> : next(nullptr), data(item) &#123;</span>&#125;</span><br><span class="line">        <span class="function"><span class="keyword">explicit</span> <span class="title">Node</span><span class="params">(ItemType&amp;&amp; item)</span> : next(nullptr), data(std::move(item)) &#123;</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Node* head;</span><br><span class="line">    Node* tail;</span><br><span class="line">    <span class="built_in">Queue</span>(<span class="type">const</span> Queue&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Queue&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Queue&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Queue</span>()&#123; head = tail = <span class="keyword">new</span> <span class="built_in">Node</span>(); &#125;</span><br><span class="line">    ~<span class="built_in">Queue</span>()&#123;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Node* temp = head;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">IsEmpty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        Node* temp = head-&gt;next;</span><br><span class="line">        head-&gt;next = temp-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">        <span class="keyword">if</span> (head-&gt;next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            tail = head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ItemType* <span class="title">Peek</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tail-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &amp;tail-&gt;next-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">IsEmpty</span>()) <span class="built_in">Pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head-&gt;next == <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Enqueue</span><span class="params">(<span class="type">const</span> ItemType&amp; item)</span></span>&#123;</span><br><span class="line">        Node* temp = <span class="keyword">new</span> <span class="built_in">Node</span>(item);</span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        tail-&gt;next = temp;</span><br><span class="line">        tail = temp;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Enqueue</span><span class="params">(ItemType&amp;&amp; item)</span></span>&#123;</span><br><span class="line">        Node* temp = <span class="keyword">new</span> <span class="built_in">Node</span>(std::<span class="built_in">move</span>(item));</span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="literal">nullptr</span>)</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        tail-&gt;next = temp;</span><br><span class="line">        tail = temp;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Dequeue</span><span class="params">(ItemType&amp; item)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">IsEmpty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        Node* temp = head-&gt;next;</span><br><span class="line">        item = std::<span class="built_in">move</span>(temp-&gt;data);</span><br><span class="line">        head-&gt;next = temp-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">        <span class="keyword">if</span> (head-&gt;next == <span class="literal">nullptr</span>) </span><br><span class="line">            tail = head;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 迭代器支持</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Iterator</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        Node* current;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Iterator</span>(Node* node) : <span class="built_in">current</span>(node) &#123;&#125;</span><br><span class="line">        ItemType&amp; <span class="keyword">operator</span>*() &#123; <span class="keyword">return</span> current-&gt;data; &#125;</span><br><span class="line">        Iterator&amp; <span class="keyword">operator</span>++() &#123; current = current-&gt;next; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> Iterator&amp; other) <span class="type">const</span> &#123; <span class="keyword">return</span> current != other.current;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="function">Iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">Iterator</span>(head-&gt;next); &#125;</span><br><span class="line">    <span class="function">Iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">Iterator</span>(<span class="literal">nullptr</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ItemType&gt;</span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, Queue&lt;ItemType&gt;&amp; queue) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;[&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; item : queue) &#123;</span><br><span class="line">        os &lt;&lt; item;</span><br><span class="line">        <span class="keyword">if</span> (&amp;item != &amp;(*queue.<span class="built_in">end</span>())) &#123;</span><br><span class="line">            os &lt;&lt; <span class="string">&quot;, &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        q.<span class="built_in">Enqueue</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout&lt;&lt; q &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        q.<span class="built_in">Dequeue</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout&lt;&lt; q &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; q.<span class="built_in">Peek</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout&lt;&lt; q &lt;&lt; std::endl;</span><br><span class="line">    q.<span class="built_in">Empty</span>();</span><br><span class="line">    std::cout&lt;&lt; q &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Programing/C#/Empty/"/>
      <url>/2025/01/04/Programing/C#/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Z%20Reference%20Link/"/>
      <url>/2025/01/04/Base%20Knowledge/Z%20Reference%20Link/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><p>CS自学指南 <a href="https://csdiy.wiki/">https://csdiy.wiki/</a></p><h1 id="Data-Structures-amp-Algorithm"><a href="#Data-Structures-amp-Algorithm" class="headerlink" title="Data Structures &amp; Algorithm"></a>Data Structures &amp; Algorithm</h1><p>信息学奥林匹克竞赛 <a href="https://oi-wiki.org/">https://oi-wiki.org/</a></p><h2 id="Misc-1"><a href="#Misc-1" class="headerlink" title="Misc"></a>Misc</h2><h2 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h2><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><h2 id="Linear"><a href="#Linear" class="headerlink" title="Linear"></a>Linear</h2><h2 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h2><h2 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h2><h2 id="Basic-Algorithm"><a href="#Basic-Algorithm" class="headerlink" title="Basic Algorithm"></a>Basic Algorithm</h2><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h1 id="Artificial-Intelligence"><a href="#Artificial-Intelligence" class="headerlink" title="Artificial Intelligence"></a>Artificial Intelligence</h1><h2 id="Generative-AI"><a href="#Generative-AI" class="headerlink" title="Generative AI"></a>Generative AI</h2><h2 id="Reinforcement-Learning"><a href="#Reinforcement-Learning" class="headerlink" title="Reinforcement Learning"></a>Reinforcement Learning</h2><h1 id="Computer-Graphics"><a href="#Computer-Graphics" class="headerlink" title="Computer Graphics"></a>Computer Graphics</h1><p>GAMES系列课程 <a href="https://games-cn.org/">https://games-cn.org/</a></p><h2 id="Simulation"><a href="#Simulation" class="headerlink" title="Simulation"></a>Simulation</h2><h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><h2 id="Rendering"><a href="#Rendering" class="headerlink" title="Rendering"></a>Rendering</h2><h2 id="Geometry"><a href="#Geometry" class="headerlink" title="Geometry"></a>Geometry</h2><h1 id="Operating-system"><a href="#Operating-system" class="headerlink" title="Operating system"></a>Operating system</h1><p>操作系统：设计与实现 (2024 春季学期) <a href="https://jyywiki.cn/OS/2024/">https://jyywiki.cn/OS/2024/</a></p><h1 id="Compilation-Principle"><a href="#Compilation-Principle" class="headerlink" title="Compilation Principle"></a>Compilation Principle</h1><h1 id="Computer-Organization"><a href="#Computer-Organization" class="headerlink" title="Computer Organization"></a>Computer Organization</h1><h1 id="Computer-Network"><a href="#Computer-Network" class="headerlink" title="Computer Network"></a>Computer Network</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Operating%20system/5%20%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2025/01/04/Base%20Knowledge/Operating%20system/5%20%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Operating%20system/4%20%E5%86%85%E6%A0%B8/"/>
      <url>/2025/01/04/Base%20Knowledge/Operating%20system/4%20%E5%86%85%E6%A0%B8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Operating%20system/3%20%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
      <url>/2025/01/04/Base%20Knowledge/Operating%20system/3%20%E8%99%9A%E6%8B%9F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Operating%20system/2%20%E5%B9%B6%E5%8F%91/"/>
      <url>/2025/01/04/Base%20Knowledge/Operating%20system/2%20%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>并发：<br>同一时间段，多个任务请求执行，任一时刻只能处理其中一个任务。<br>发生在 同一实体，单处理器<br>目的是 提高系统响应速度</p><p>并行：<br>同一时间段，多个任务同时执行，任一时刻同时处理多个任务。<br>发生在 不同实体，多处理器<br>目的是 提高处理能力</p><p>核心区别：任务间是否存在处理器的竞争关系。</p><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>原理：</p><ul><li>互斥<ul><li>需求如此</li></ul></li><li>请求与保持<ul><li>先机优势：首次执行一次性分配资源，避免等待。</li></ul></li><li>不可剥夺<ul><li>兜底策略：申请不到时，主动释放已有资源。</li></ul></li><li>循环等待<ul><li>万能钥匙：按序申请，给资源编号，按序号优先级先后申请。此时多资源并发互斥变成单资源。</li></ul></li></ul><p>理解并发问题：一切都是状态机</p><p>并发编程技巧：</p><h1 id="进程、线程、协程"><a href="#进程、线程、协程" class="headerlink" title="进程、线程、协程"></a>进程、线程、协程</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Operating%20system/1%20Overview/"/>
      <url>/2025/01/04/Base%20Knowledge/Operating%20system/1%20Overview/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Tree/Traverse/"/>
      <url>/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Tree/Traverse/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/String/Empty/"/>
      <url>/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/String/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Misc/Empty/"/>
      <url>/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Misc/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Linear/Empty/"/>
      <url>/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Linear/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Hash/Empty/"/>
      <url>/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Hash/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Graph/Traverse/"/>
      <url>/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Graph/Traverse/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Dynamic%20Programming/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Dynamic%20Programming/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>动态规划是一种通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。</p><p>能用动态规划解决的问题，需要满足三个条件：<strong>最优子结构，无后效性和子问题重叠</strong>。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h2><p>具有最优子结构也可能是适合用贪心的方法求解。</p><p>注意要确保我们考察了最优解中用到的所有子问题。</p><ol><li>证明问题最优解的第一个组成部分是做出一个选择；</li><li>对于一个给定问题，在其可能的第一步选择中，假定你已经知道哪种选择才会得到最优解。你现在并不关心这种选择具体是如何得到的，只是假定已经知道了这种选择；</li><li>给定可获得的最优解的选择后，确定这次选择会产生哪些子问题，以及如何最好地刻画子问题空间；</li><li>证明作为构成原问题最优解的组成部分，每个子问题的解就是它本身的最优解。方法是反证法，考虑加入某个子问题的解不是其自身的最优解，那么就可以从原问题的解中用该子问题的最优解替换掉当前的非最优解，从而得到原问题的一个更优的解，从而与原问题最优解的假设矛盾。</li></ol><p>要保持子问题空间尽量简单，只在必要时扩展。</p><p>最优子结构的不同体现在两个方面：</p><ol><li>原问题的最优解中涉及多少个子问题；</li><li>确定最优解使用哪些子问题时，需要考察多少种选择。</li></ol><p>子问题图中每个定点对应一个子问题，而需要考察的选择对应关联至子问题顶点的边。</p><h2 id="无后效性"><a href="#无后效性" class="headerlink" title="无后效性"></a>无后效性</h2><p>已经求解的子问题，不会再受到后续决策的影响。</p><h2 id="子问题重叠"><a href="#子问题重叠" class="headerlink" title="子问题重叠"></a>子问题重叠</h2><p>如果有大量的重叠子问题，我们可以用空间将这些子问题的解存储下来，避免重复求解相同的子问题，从而提升效率。</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>对于一个能用动态规划解决的问题，一般采用如下思路解决：</p><ol><li>将原问题划分为若干 <strong>阶段</strong>，每个阶段对应若干个子问题，提取这些子问题的特征（称之为 <strong>状态</strong>）；</li><li>寻找每一个状态的可能 <strong>决策</strong>，或者说是各状态间的相互转移方式（用数学的语言描述就是 <strong>状态转移方程</strong>）。</li><li>按顺序求解每一个阶段的问题。</li></ol><h1 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h1><p>记忆化搜索是一种通过记录已经遍历过的状态的信息，从而避免对同一状态重复遍历的搜索实现方式。</p><p>因为记忆化搜索确保了每个状态只访问一次，它也是一种常见的动态规划实现方式。</p><h1 id="背包-DP"><a href="#背包-DP" class="headerlink" title="# 背包 DP"></a># 背包 DP</h1><h2 id="0-1-背包问题"><a href="#0-1-背包问题" class="headerlink" title="0-1 背包问题"></a>0-1 背包问题</h2><p>只有两种可能的状态（取与不取）</p><p>状态转移方程：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> l = W; l &gt;= w[i]; l--) </span><br><span class="line">f[l] = <span class="built_in">max</span>(f[l], f[l - w[i]] + v[i]); <span class="comment">// 状态方程</span></span><br></pre></td></tr></table></figure><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><p>完全背包模型与 0-1 背包类似，与 0-1 背包的区别仅在于一个物品可以选取无限次，而非仅能选取一次。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Basic%20Algorithm/%E5%89%8D%E7%BC%80%E5%92%8C%20&amp;%20%E5%B7%AE%E5%88%86/"/>
      <url>/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Basic%20Algorithm/%E5%89%8D%E7%BC%80%E5%92%8C%20&amp;%20%E5%B7%AE%E5%88%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Basic%20Algorithm/Sort/"/>
      <url>/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Basic%20Algorithm/Sort/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Basic%20Algorithm/Recursion%20&amp;%20Divide%20and%20Conquer/"/>
      <url>/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Basic%20Algorithm/Recursion%20&amp;%20Divide%20and%20Conquer/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Basic%20Algorithm/Greedy/"/>
      <url>/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Basic%20Algorithm/Greedy/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Basic%20Algorithm/Enumerate/"/>
      <url>/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Basic%20Algorithm/Enumerate/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Basic%20Algorithm/Binary%20Search/"/>
      <url>/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Basic%20Algorithm/Binary%20Search/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Basic%20Algorithm/Binary%20Lifting/"/>
      <url>/2025/01/04/Base%20Knowledge/Data%20Structures%20&amp;%20Algorithm/Basic%20Algorithm/Binary%20Lifting/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Organization/Empty/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Organization/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Network/4%20Network%20Layer/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Network/4%20Network%20Layer/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Network/5%20Link%20Layer/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Network/5%20Link%20Layer/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Network/3%20Transport%20Layer/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Network/3%20Transport%20Layer/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><h2 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h2><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><h1 id="KCP"><a href="#KCP" class="headerlink" title="KCP"></a>KCP</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Network/1%20Overview/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Network/1%20Overview/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Network/2%20Application%20Layer/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Network/2%20Application%20Layer/</url>
      
        <content type="html"><![CDATA[<h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Graphics/Rendering/%E5%AE%9E%E6%97%B6%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9D%80%E8%89%B2/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Graphics/Rendering/%E5%AE%9E%E6%97%B6%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9D%80%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="表面模型"><a href="#表面模型" class="headerlink" title="表面模型"></a>表面模型</h1><h2 id="Disney-principled-BRDF"><a href="#Disney-principled-BRDF" class="headerlink" title="Disney principled BRDF"></a>Disney principled BRDF</h2><h2 id="GGX"><a href="#GGX" class="headerlink" title="GGX"></a>GGX</h2><h2 id="LTC"><a href="#LTC" class="headerlink" title="LTC"></a>LTC</h2><h1 id="散射模型"><a href="#散射模型" class="headerlink" title="散射模型"></a>散射模型</h1><h1 id="participating-media"><a href="#participating-media" class="headerlink" title="participating media"></a>participating media</h1><h1 id="NPR"><a href="#NPR" class="headerlink" title="NPR"></a>NPR</h1><h1 id="复杂模型"><a href="#复杂模型" class="headerlink" title="复杂模型"></a>复杂模型</h1><h1 id="BSSRDF"><a href="#BSSRDF" class="headerlink" title="BSSRDF"></a>BSSRDF</h1><h1 id="hair"><a href="#hair" class="headerlink" title="hair"></a>hair</h1><h1 id="skin"><a href="#skin" class="headerlink" title="skin"></a>skin</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Graphics/Rendering/%E5%AE%9E%E6%97%B6%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Graphics/Rendering/%E5%AE%9E%E6%97%B6%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="prefiltering"><a href="#prefiltering" class="headerlink" title="prefiltering"></a>prefiltering</h1><h1 id="split-sum"><a href="#split-sum" class="headerlink" title="split sum"></a>split sum</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Graphics/Rendering/%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Graphics/Rendering/%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="shadow-mapping"><a href="#shadow-mapping" class="headerlink" title="shadow mapping"></a>shadow mapping</h1><h1 id="VSM"><a href="#VSM" class="headerlink" title="VSM"></a>VSM</h1><h1 id="moment-shadow-maps"><a href="#moment-shadow-maps" class="headerlink" title="moment shadow maps"></a>moment shadow maps</h1><h1 id="PCSS"><a href="#PCSS" class="headerlink" title="PCSS"></a>PCSS</h1><h1 id="SDF-Shadows"><a href="#SDF-Shadows" class="headerlink" title="SDF Shadows"></a>SDF Shadows</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Graphics/Rendering/%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93%E4%B8%AD%E7%9A%84%E5%B7%A5%E4%B8%9A%E7%95%8C%E6%8A%80%E6%9C%AF/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Graphics/Rendering/%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93%E4%B8%AD%E7%9A%84%E5%B7%A5%E4%B8%9A%E7%95%8C%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="cascaded-shading"><a href="#cascaded-shading" class="headerlink" title="cascaded shading"></a>cascaded shading</h1><h1 id="tiled-shading"><a href="#tiled-shading" class="headerlink" title="tiled shading"></a>tiled shading</h1><h1 id="deferred-shading"><a href="#deferred-shading" class="headerlink" title="deferred shading"></a>deferred shading</h1><h1 id="particles"><a href="#particles" class="headerlink" title="particles"></a>particles</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Graphics/Rendering/%E5%AE%9E%E6%97%B6%E6%8A%97%E9%94%AF%E9%BD%BF%E4%B8%8E%E8%B6%85%E9%87%87%E6%A0%B7/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Graphics/Rendering/%E5%AE%9E%E6%97%B6%E6%8A%97%E9%94%AF%E9%BD%BF%E4%B8%8E%E8%B6%85%E9%87%87%E6%A0%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="TAA"><a href="#TAA" class="headerlink" title="TAA"></a>TAA</h1><h1 id="SMAA"><a href="#SMAA" class="headerlink" title="SMAA"></a>SMAA</h1><h1 id="DLSS"><a href="#DLSS" class="headerlink" title="DLSS"></a>DLSS</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Graphics/Rendering/%E5%AE%9E%E6%97%B6%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Graphics/Rendering/%E5%AE%9E%E6%97%B6%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="屏幕空间"><a href="#屏幕空间" class="headerlink" title="屏幕空间"></a>屏幕空间</h1><h2 id="ambient-occlusion"><a href="#ambient-occlusion" class="headerlink" title="ambient occlusion"></a>ambient occlusion</h2><h2 id="screen-space-ray-tracing"><a href="#screen-space-ray-tracing" class="headerlink" title="screen space ray tracing"></a>screen space ray tracing</h2><h2 id="RSM"><a href="#RSM" class="headerlink" title="RSM"></a>RSM</h2><h1 id="3D空间"><a href="#3D空间" class="headerlink" title="3D空间"></a>3D空间</h1><h2 id="VPL"><a href="#VPL" class="headerlink" title="VPL"></a>VPL</h2><h2 id="LPV"><a href="#LPV" class="headerlink" title="LPV"></a>LPV</h2><h2 id="VXGI"><a href="#VXGI" class="headerlink" title="VXGI"></a>VXGI</h2><h2 id="RTXGI"><a href="#RTXGI" class="headerlink" title="RTXGI"></a>RTXGI</h2><h1 id="预计算"><a href="#预计算" class="headerlink" title="预计算"></a>预计算</h1><h2 id="precomputed-radiance-transfer"><a href="#precomputed-radiance-transfer" class="headerlink" title="precomputed radiance transfer"></a>precomputed radiance transfer</h2><h2 id="light-baking"><a href="#light-baking" class="headerlink" title="light baking"></a>light baking</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Graphics/Rendering/%E5%AE%9E%E6%97%B6%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Graphics/Rendering/%E5%AE%9E%E6%97%B6%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA/</url>
      
        <content type="html"><![CDATA[<h1 id="backprojection"><a href="#backprojection" class="headerlink" title="backprojection"></a>backprojection</h1><h1 id="motion-vector"><a href="#motion-vector" class="headerlink" title="motion vector"></a>motion vector</h1><h1 id="joint-bilateral-filtering"><a href="#joint-bilateral-filtering" class="headerlink" title="joint bilateral filtering"></a>joint bilateral filtering</h1><h1 id="temporal-accumulation"><a href="#temporal-accumulation" class="headerlink" title="temporal accumulation"></a>temporal accumulation</h1><h1 id="denoising"><a href="#denoising" class="headerlink" title="denoising"></a>denoising</h1><h1 id="svgf"><a href="#svgf" class="headerlink" title="svgf"></a>svgf</h1><h1 id="rae"><a href="#rae" class="headerlink" title="rae"></a>rae</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Graphics/Geometry/Empty/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Graphics/Geometry/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Graphics/Animation/%E6%B5%81%E4%BD%93/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Graphics/Animation/%E6%B5%81%E4%BD%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Graphics/Animation/%E8%B4%A8%E7%82%B9-%E5%BC%B9%E7%B0%A7%E7%B3%BB%E7%BB%9F/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Graphics/Animation/%E8%B4%A8%E7%82%B9-%E5%BC%B9%E7%B0%A7%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Graphics/Animation/%E5%88%9A%E4%BD%93/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Graphics/Animation/%E5%88%9A%E4%BD%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Computer%20Graphics/Animation/%E6%9F%94%E4%BD%93/"/>
      <url>/2025/01/04/Base%20Knowledge/Computer%20Graphics/Animation/%E6%9F%94%E4%BD%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Compilation%20Principle/4%20Syntax-Directed%20Translation/"/>
      <url>/2025/01/04/Base%20Knowledge/Compilation%20Principle/4%20Syntax-Directed%20Translation/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Compilation%20Principle/5%20Intermediate%20Code%20Generation/"/>
      <url>/2025/01/04/Base%20Knowledge/Compilation%20Principle/5%20Intermediate%20Code%20Generation/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Compilation%20Principle/2%20Lexical%20Analysis/"/>
      <url>/2025/01/04/Base%20Knowledge/Compilation%20Principle/2%20Lexical%20Analysis/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Compilation%20Principle/3%20Syntax%20Analysis/"/>
      <url>/2025/01/04/Base%20Knowledge/Compilation%20Principle/3%20Syntax%20Analysis/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Compilation%20Principle/1%20Overview/"/>
      <url>/2025/01/04/Base%20Knowledge/Compilation%20Principle/1%20Overview/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Artificial%20Intelligence/Reinforcement%20Learning/Empty/"/>
      <url>/2025/01/04/Base%20Knowledge/Artificial%20Intelligence/Reinforcement%20Learning/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2025/01/04/Base%20Knowledge/Artificial%20Intelligence/Generative%20AI/Empty/"/>
      <url>/2025/01/04/Base%20Knowledge/Artificial%20Intelligence/Generative%20AI/Empty/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
